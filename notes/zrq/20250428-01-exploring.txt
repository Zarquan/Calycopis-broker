#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Exploring the data/storage/mount classes.

    Result:

        Work in progress ...

# -----------------------------------------------------

    Validation process uses Platform to get Factories and create Builders

        @autowired in constructor
        Platform platform

        SimpleStorageResourceValidator
            builder = new SimpleStorageResourceValidator.EntityBuilder()
                {
                build(session)
                    {
                    return platform.getStorageResourceEntityFactory().create(
                        session,
                        validated
                        );
                    }
                }

        platform.getSimpleStorageResourceEntityFactory()
        -> PodmanStorageResourceEntityFactory extends SimpleStorageResourceEntityFactory
        create(....)
        -> PodmanStorageResourceEntity extends SimpleStorageResourceEntity


# -----------------------------------------------------

    Creating a full set of all the entities for each platform is a lot of duplication.

git add \
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/AbstractExecutableValidator.java \
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/functional/factory/FactoryBaseImpl.java
git commit \
    -m "Gardening"

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/AbstractExecutableValidatorFactoryImpl.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/functional/platfom/Platform.java
    Introducing Platform

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/DockerContainerEntity.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/podman/PodmanDockerContainerEntity.java
    Updated table names

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/DockerContainerEntityFactory.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/JupyterNotebookEntityFactory.java
    Removed Optional

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/functional/platfom/podman/PodmanPlatform.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/functional/platfom/podman/PodmanPlatformImpl.java
    Created platform specific versions

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/DockerContainerEntityFactoryImpl.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/DockerContainerEntityRepository.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/podman/PodmanDockerContainerEntityFactory.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/podman/PodmanDockerContainerEntityFactoryImpl.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/podman/PodmanDockerContainerEntityRepository.java
    Created platform specific versions

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/podman/
    Created platform specific versions

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/DockerContainerValidator.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/docker/DockerContainerValidatorImpl.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/JupyterNotebookValidator.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/JupyterNotebookValidatorImpl.java
    Moved Validator code to Impl class

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/JupyterNotebookEntity.java
    Removed discriminator

    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/JupyterNotebookEntityFactoryImpl.java
    java/spring/spring-webapp/src/main/java/net/ivoa/calycopis/datamodel/executable/jupyter/JupyterNotebookEntityRepository.java
    Created platform specific version

    examples/007/offerset-request.yaml
    Exploring different volume types

    notes/zrq/20250428-01-exploring.txt
    Gardening


# -----------------------------------------------------

    2025-04-29 06:04:34 ERROR org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean
        Failed to initialize JPA EntityManagerFactory:
            Association 'net.ivoa.calycopis.datamodel.executable.docker.DockerNetworkPortEntity.parent'
            targets the type 'net.ivoa.calycopis.datamodel.executable.docker.DockerContainerEntity'
            which is not an '@Entity' type

    Undo the 'Removed intermidiate tables' changes.

# -----------------------------------------------------

    Crazy idea ...
    Like faceted search, works interactively.
    The editing API *is* the offers API.
    Each step in creating the workflow sublits it to the children.
    Getting interactive feedback from the sites as we go.




















There are two ways 'a thing' can be mounted.

If we start with a file, `my-file` that we want to mount it at a location in the file system `/path/my-file`.
There are two ways of doing this.

1. Explicitly mount the single file at the target location.
* Mount `my-file` at `/path/my-file`, using the name specified in the path.

2. Create a directory to mount it in
* Create a directory at `/path/`
* mount `my-file` in it, using the original file's name `my-file`

Same applies for a directory of files.
If we have a directory of `my-calibration-data`, there are two ways of mounting that.

1. Explicitly mount the directory at the target location.
* Mount `my-calibration-data` at `/path/calibration`, using the name specified in the path.

2. Create a directory to mount it in
* Create a directory at `/path/`
* mount the contents of `my-calibration-data` in side it, using the original file names from `my-calibration-data`

----

To represent this, we could have two types of volume mount.

A single instance volume mount, that takes a single resource and mounts it at the path specified.

Which explicitly mount the single file at the target location.
* Mount `my-file` at `/path/my-file`, using the name specified in the path.

A multiple file volume mount, that creates a directory and mounts all the resources as files within that directory.
* Create a directory at `/path/`
* mount `my-file-001` in it, using the original file's name `my-file-001`
* mount `my-file-002` in it, using the original file's name `my-file-002`
* mount `my-file-002` in it, using the original file's name `my-file-002`

----

Or we could have a single type of volume mount and a CARDINALITY flag that indicates if this is a single resource (method 1) or multiple resources mounted in a directory (method 2).


takes a single resource and mounts it at the path specified.






