#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Notes on Russ's suggested documents.
        http://mail.ivoa.net/pipermail/p3t/2024-August/000113.html

    Result:

        Work in progress ...

# -----------------------------------------------------


    https://sqr-091.lsst.io/
        The framework document that lays out the standards structure, defines
        data types, provides data models that are shared between standards
        such as structured error messages, and says what the other documents
        should contain.  Please don't put any weight on the structured error
        specification here; it's just a half-baked iteration on the model from
        our previous discussion, included as a placeholder.

    https://sqr-092.lsst.io/
        The JSON network protocol encoding.  This is where we get to the heart
        of the new work.  I tried to write the separation between this
        document and the other documents with both an HTTP XML and a gRPC
        specification in mind and put the things that would vary in this
        document.  It's also a starting point for a proper JSON serialization
        specification.

    https://sqr-093.lsst.io/
        A web service specification for a very simple SODA-style cutout
        service.  This is not a great example service.  I picked this one just
        because I was already very familiar with it and could write it
        quickly, and because I'm currently working on that part of our service
        stack.

# -----------------------------------------------------

    I have more on the error specifications, need to write these up this weekend.
    (need to fill in the URLs)

# -----------------------------------------------------

    The binding to JSON is too strong.

    Please don't call it the JSON network protocol - that is what P3T should be trying to avoid.
    We are in danger of repeating the mistakes of 2004 20 years later.

    We need to relax our grip and let go of the dependency on JSON.

    P3T should not be defining a JSON protocol - that's the mistake from 2004.
    OpenAPI supports content negotiation, we should use it.

    Split sqr-092 into 4 separate documents.

        1) IVOA Service protocol
            Generic definitions of what operations are.
            No mention of network protocols or serialisation formats.

        2) IVOA HTTP protocol
            How the IVOA should use aspects of the HTTP protocol.
            Defines the formatting IVOA services should use for HTTP GET params.
            Defines how IVOA services should use the HTTP content negotiation process.
            Also gives us somewhere to talk about error codes, caching, cross-site-scripting, and the POST-redirect-GET pattern.

        3) IVOA JSON serialisation
            This is just the details of how IVOA services should map data structures into a JSON serialisation.
            This is a stand-alone document, separate from everything else.
            It might turn out to be simpler if we start by referring to the existing JSON standard and then only document the differences.

        4) IVOA Web Service protocol
            Specific sub-type of the [IVOA Service Protocol] for HTTP based web services.

            * MUST use HTTP request params as defined in [IVOA HTTP protocol].
            * MUST use content negotiation as defined in [IVOA HTTP protocol].

            * SHOULD include [IVOA JSON serialisation] as the content type for structured requests and responses.
            * MAY include another serialisation as the content type for structured requests and responses.

            A particular IVOA standard, e.g. SODA, MAY specify a minimal set of content types.
            * we already do this when we say TAP requires VOTable.
            * we should use HTTP content type rather than a separate FORMAT parameter (non-http versions can add the FORMAT param if they need it).
            * Standards being developed in 2024 MAY include JSON in the minimum set.
            * Standards defined in 2034 MAY specify a different minimum set.

    This is not a huge amount of work, but it does need a change in the way we _think_ about it.
    The hard part is letting go.

    Separate the data model from the serialization.
    A service standard defines the data model, NOT the serialization.
    The standard refers to [IVOA Web Service protocol] as an implementation.
    The Web Service protocol says
        1) Use content negotiation for HTTP requests.
        2) SHOULD include JSON content type.
    End result is the same, just a few more lines in your OpenAPI spec,
    BUT it breaks the hard coded reliance on one serialization format.

    For example, the SODA document would describe the operations and data model
    in an abstract way, without referring to a serialization format.
    The SODA document would have a section on implementations,
    with a sub-section on the [Web Service] implementation,
    which descibes how to use the [Web Service] protocol to implement
    the SODA service.
    As part of this the SODA specification can define a minimum set
    of content types that a [SODA Web Service] MUST support.
    This minimum set would include JSON.

    End result, Rubin et al get what they want;
    P3T version of SODA requires JSON,
    BUT we do not build it in from the start.
    Change one line in the SODA standard and a future version
    could include support for ApacheAvro.








    What I'm aiming for

        The generic part of TAP, VOSpace or ExecutionBroker define the datamodel and the operations.
        A section at the end of the document defines the web service implementation.
        The web service implementation section refes to Webservice protocol and HTTP request protocol.
        There is no need to mention JSON in the specification.


