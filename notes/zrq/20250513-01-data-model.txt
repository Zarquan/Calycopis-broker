#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Accumulated changes to the data model.

    Result:

        Work in progress ...

# -----------------------------------------------------

    Publish the data model components
        IvoaDataResource
        SkaoDataResource
        Single Computer, sibling of Executable
        Decide model structure
            Volumes
            Science - science metadata
            Access  - data access

# -----------------------------------------------------

    Validate an IvoaDataResource
    If skao resolve into SkaoDataResource
        fetch the replicas
        use the replicas in schedule()
    use accessUrl to treat it as a download
        use the accessUrl in schedule()

# -----------------------------------------------------

    [COR-857] [ExecBroker] Python module to query the DataLink and DataManagment services to collect the required metadata
    https://jira.skatelescope.org/browse/COR-857

    Is this already solved?


# -----------------------------------------------------

    Things we need to do:

    Get access to some compute, upload some files and get a list of replicas.
    -- done
    See what they actually look like.
    -- need to see what it looks like in JSON.
    -- check the API documentation

    Experiment with importing data and accessing it via DataManagment API.
    How much support is there for handling replicas ?
    [COR-857]
    Code already exists, we need to extract it and run it ourselves.
    Can we implement it in Java - not yet.

    Define the IvoaDataResource (metadata) and SkaoDataResource (replicas).
    [COR-843]

        IvoaDataResource has science metadata.
        SkaoDataResource has Rucio DataLake details

    Validation code that reads the DataLake resources and creates the right steps.
    [COR-864]

    Document the data model and present it at architecture forum.
    [COR-869]
        This happens after the end of this iteration.
        Find out when the next architecture forum is.

    Update the architecture documents for ExecutionBroker.


# -----------------------------------------------------

    IvoaDataResource
      ivoa:
        # IVOA identifier.
        ivoid: "ivo://skao.int/data?testing:zrq-test-20250509-082506"
        # Resolved ObsCore data.
        obs-core:
          obs_id: "zrq-test-20250513-041926",
          obs_collection: "testing",
          obs_publisher_did: "ivo://skao.int/data?testing:zrq-test-20250513-041926",
          obs_creator_did:   "ivo://skao.int/data?testing:zrq-test-20250513-041926",
          dataproduct_type: "testdata",
          calib_level: 0,
          access_url: "https://ivoa.datalink.srcdev.skao.int/rucio/links?ID=ivo%3A%2F%2Fskao.int%2Fdata%3Ftesting%3Azrq-test-20250513-041926%0A",
          access_format: "application/x-votable+xml;content=datalink"
        # Resolved DataLink data.
        data-links:
          - ID: "...."
            access_url: "...."
            service_def: "...."
            error_message: "...."
            description: "...."
            semantics: "...."
            content_type: "...."
            content_length: "...."
            content_qualifier: "...."
            local_semantics: "...."
            link_auth: "...."
            link_authorized: "...."

    SkaoDataResource extends IvoaDataResource
      ivoa:
        ivoid: "ivo://skao.int/data?testing:zrq-test-20250509-082506"
        ....
        ....
      skao:
        rucio:
          type:  "FILE"
          scope: "testing"
          name:  "zrq-test-20250509-082506"
          replicas:
            - rse: "SPSRC_STORM"
              url: "davs://rucio.espsrc.iaa.csic.es:443/disk/dev/deterministic/testing/7a/98/zrq-test-20250509-082506"
            - rse: "STFC_STORM"
              url: "davs://storm.srcnet.skao.int:443/sa/deterministic/testing/7a/98/zrq-test-20250509-082506"
            - rse: "SWESRC-OSO-T1"
              url: "davs://xrootd-01.swesrc.chalmers.se:1094/data/rse/testing/7a/98/zrq-test-20250509-082506"
            - rse: "SWESRC-OSO-T0"
              url: "davs://xrootd-02.swesrc.chalmers.se:1094/data/rse/testing/7a/98/zrq-test-20250509-082506"

# -----------------------------------------------------

    Minimum solution.

    IvoaDataResource
      ivoa:
        # IVOA identifier.
        ivoid: "ivo://skao.int/data?testing:zrq-test-20250509-082506"

    SkaoDataResource extends IvoaDataResource
      ivoa:
        ivoid: "ivo://skao.int/data?testing:zrq-test-20250509-082506"
      skao:
        rucio:
          type:  "FILE"
          scope: "testing"
          name:  "zrq-test-20250509-082506"
          replicas:
            - rse: "SPSRC_STORM"
              url: "davs://rucio.espsrc.iaa.csic.es:443/disk/dev/deterministic/testing/7a/98/zrq-test-20250509-082506"
            - rse: "STFC_STORM"
              url: "davs://storm.srcnet.skao.int:443/sa/deterministic/testing/7a/98/zrq-test-20250509-082506"
            - rse: "SWESRC-OSO-T1"
              url: "davs://xrootd-01.swesrc.chalmers.se:1094/data/rse/testing/7a/98/zrq-test-20250509-082506"
            - rse: "SWESRC-OSO-T0"
              url: "davs://xrootd-02.swesrc.chalmers.se:1094/data/rse/testing/7a/98/zrq-test-20250509-082506"


# -----------------------------------------------------

    executable:
      ....
    resources:
      # Compute resource (single)
      # generic-compute-resource
      computer:
        ....
        # How the data/storage resources are mounted in this compute resource.
        volumes:
          - ....
          - ....

      # Science resources, resolves into one or more data resources.
      # (*) Next iteration.
      science:
        - ....
        # Metadata for a single image cube
        - type: ivoa-science-resource-instance
          # The IVOA metadata block
          ivoa:
            content-type: image, cube
          # The data resource linked to this science resource.
          data: ....

        # Metadata for a collection of spectra
        - type: ivoa-science-resource-collection
          # The IVOA metadata block
          ivoa:
            content-type: spectra
          # The data resources for this science resource.
          data:
            - ....
            - ....
            - ....

      # Data resources, assigned to storage resources and linked to volumes
      data:
        - type: ivoa-data-resource
          ....
          # The science resource this is linked to.
          science: ....
          # The storage resource this is linked to.
          storage: ....

        - type: skao-data-resource
          ....
          # The science resource this is linked to.
          science: ....
          # The storage resource this is stored in.
          storage: ....

      # Storage resources, requested and generated.
      storage:
        - ....
        - ....
          # The data resources in this storage
          data:
            - ....
            - ....


