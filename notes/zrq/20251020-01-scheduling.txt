#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Refactor the scheduling

    Result:

        Work in progress ...


# -----------------------------------------------------
# Run an instance of the developer tools.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --interactive \
        --publish 8082:8082 \
        --name developer-tools \
        --volume "${TREBULA_CODE}:/trebula:rw,z" \
        --volume "${ISOBEON_CODE}:/isobeon:rw,z" \
        --volume "${CALYCOPIS_CODE}:/calycopis:rw,z" \
        --volume "${HOME}/.m2/repository:/root/.m2/repository:rw,z" \
        ghcr.io/ivoa/calycopis/developer-tools:2025.08.12 \
        bash

    >   ....
    >   ....


# -----------------------------------------------------
# Build the combined schema.
#[root@developer-tools]

        newversion=0.0.1-SNAPSHOT-$(date '+%Y%m%d')

        source=/trebula/schema
        target=/trebula/target/

        rm -rf "${target:?}"
        mkdir  "${target:?}"

        /isobeon/schema-processor.py \
            "${source}/Calycopis-broker.yaml" \
            "${target}/Calycopis-broker-${newversion}.yaml"

        ls -al "${target}"

    >   ....
    >   ....


# -----------------------------------------------------
# Copy the combined schema back into the Java project.
#[root@developer-tools]

    #
    # Note - using symlinks works inside the container, but breaks the Eclipse build.
    # Although not a problem because we don't need the Eclipse build for anything.
    # TODO Move the Maven project into the schema project and install a jar.
    #

    pushd /calycopis/java/spring/spring-openapi
        pushd openapi

            rm -rf target

            cp -r /trebula/target target

            ls -al target

        popd
    popd


# -----------------------------------------------------
# Update the version in the Maven POM.
#[root@developer-tools]

    # newversion=0.0.1-SNAPSHOT-$(date '+%Y%m%d')

    # TODO This moves to the schema project.
    pushd /calycopis/java/spring/spring-openapi

        sed -i '
            /<\/parent>/, /<properties>/ {
                s/<version>.*<\/version>/<version>'${newversion:?}'<\/version>/
                }
            ' pom.xml

    popd

    pushd /calycopis/java/spring/spring-webapp

        sed -i '
            /<\/parent>/, /<properties>/ {
                s/<version>.*<\/version>/<version>'${newversion:?}'<\/version>/
                }
            ' pom.xml

    popd


# -----------------------------------------------------
# Build the Java service API.
#[root@developer-tools]

    #
    # TODO This moves to the schema project.
    #

    pushd /calycopis/java/spring/spring-openapi ; ./mvnw clean install ; popd

        ....
        ....


# -----------------------------------------------------
# Build and run the Java service.
#[root@developer-tools]

    pushd /calycopis/java/spring/spring-webapp  ; ./mvnw clean spring-boot:run ; popd

        ....
        ....


# -----------------------------------------------------
# -----------------------------------------------------
# Launch a client in the same container.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        developer-tools \
            bash

        ....
        ....


# -----------------------------------------------------
# ...
#[root@developer-tools]

    examplename=concurrent-test-001

    pushd "$(mktemp --directory)"

        #
        # Docker container for 1HR.
        cat > "001-offerset-request.yaml" << EOF
name: ${examplename}
executable:
  name: ${examplename}-executable
  type: https://www.purl.org/ivoa.net/EB/schema/types/executable/docker-container-1.0
  image:
    locations:
      - "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13"
    digest: sha256:5d22a47f43b2b5efc433554092de724bd6c3cf01d2c74038f6569770a5dd5245
schedule:
  requested:
    duration: PT1H
computer:
  name: example-005-computer
  type: https://www.purl.org/ivoa.net/EB/schema/types/computer/simple-compute-resource-1.0
  volumes:
    - "Input data"
volumes:
  - name: "Input data"
    type: https://www.purl.org/ivoa.net/EB/schema/types/volume/simple-volume-mount-1.0
    path: /inputs/
    mode: READONLY
    cardinality: CONTAINER
    resources:
      - example-data-01
      - example-data-02
      - example-data-03
data:
  - name: example-data-01
    type: https://www.purl.org/ivoa.net/EB/schema/types/data/skao-data-resource-1.0
    skao:
      namespace:  "testing"
      objectname: "zrq-test-20250509-082506"
      datasize:   27487790694400
      replicas:
        - rsename: "AUSRC_STORM"
        - rsename: "JPSRC_STORM"
        - rsename: "SPSRC_STORM"
  - name: example-data-02
    type: https://www.purl.org/ivoa.net/EB/schema/types/data/skao-data-resource-1.0
    skao:
      namespace:  "testing"
      objectname: "zrq-test-20250509-094501"
      datasize:   26843545600
      replicas:
        - rsename: "JPSRC_STORM"
        - rsename: "SPSRC_STORM"
  - name: example-data-03
    type: https://www.purl.org/ivoa.net/EB/schema/types/data/skao-data-resource-1.0
    skao:
      namespace:  "testing"
      objectname: "zrq-test-20250509-123401"
      datasize:   26214400
      replicas:
        - rsename: "SPSRC_STORM"
EOF

        curl \
            --silent \
            --show-error \
            --header 'Content-Type: application/yaml' \
            --data-binary "@001-offerset-request.yaml" \
            --header 'Accept: application/yaml' \
            'http://127.0.0.1:8082/offersets' \
        | tee "002-offerset-response.yaml" \
        | yq '[
            .offers[] | {
                "uuid": .uuid,
                "name": .name,
                "schedule": .schedule
                }
            ]
            '


    #
    # Accept the first offer
    #

    offerurl=$(
        yq '
            .offers[0].href
            ' \
        "002-offerset-response.yaml"
        )

    cat > "003-accept-00-request.json" << EOF
{
"update": {
    "type":  "uri:enum-value-update",
    "path":  "phase",
    "value": "ACCEPTED"
    }
}
EOF

        curl \
            --silent \
            --show-error \
            --header 'Content-Type: application/json' \
            --data-binary "@003-accept-00-request.json" \
            --header 'Accept: application/yaml' \
            "${offerurl}" \
        | tee "004-accept-00-response.yaml" \
        | yq '{
            "uuid": .uuid,
            "name": .name,
            "phase": .phase,
            "schedule": .schedule
            }'




        curl \
            --silent \
            --show-error \
            --header 'Accept: application/yaml' \
            "${offerurl}" \
        | yq '{
            "uuid": .uuid,
            "name": .name,
            "phase": .phase,
            "schedule": .schedule
            }'




