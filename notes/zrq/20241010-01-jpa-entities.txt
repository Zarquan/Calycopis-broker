#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Success

    Result:

        Work in progress ...

# -----------------------------------------------------




public interface SchedulerParams
    {

    public Interval getStartInterval();
    public Duration getMinDuration();
    public Duration getMaxDuration();

    public getMinCores();
    public getMaxCores();

    public getMinMemory();
    public getMaxMemory();

    }

public interface SchedulerBlock
    {

    public Long getBlockStart();
    public Long getBlocklength();

    public Long getMinCores();
    public Long getMaxCores();

    public Long getMinMemory();
    public Long getMaxMemory();

    }

public class SchedulerBlockEntity
implements SchedulerBlock
    {
    protected SchedulerBlockEntity()
        {
        }

    protected SchedulerBlockEntity(
        final Long blockstart,
        final Long blocklength,
        final Long mincores,
        final Long maxcores,
        final Long minmemory,
        final Long maxmemory
        ){
        this.blockstart  = blockstart;
        this.blocklength = blocklength;
        this.mincores    = mincores;
        this.maxcores    = maxcores;
        this.minmemory   = minmemory;
        this.maxmemory   = maxmemory;
        }

    private Long blockstart;
    public Long getBlocksStart()
        {
        return this.blockstart;
        }

    private Long blocklength;
    public Long getBlocksLength()
        {
        return this.blocklength;
        }

    private Long mincores;
    public Long getMinCores()
        {
        return this.mincores;
        }

    private Long maxcores;
    public Long getMaxCores()
        {
        return this.maxccores;
        }

    private Long minmemory;
    public Long getMinMemory()
        {
        return this.minmemory;
        }

    private Long maxmemory;
    public Long getMaxMemory()
        {
        return this.maxmemory;
        }

    }

public interface SchedulerBlockFactory
    extends FactoryBase
    {

    /**
     * Generate a set of SchedulerBlocks.
     *
     */
    List<SchedulerBlock> generate(final SchedulerParams params);

    }

public class SchedulerBlockFactoryImpl
    implements SchedulerBlockFactory
    extends FactoryBaseImpl
    {

    /**
     * Generate a set of SchedulerBlocks.
     *
     */
    List<SchedulerBlock> generate(final SchedulerParams params)
        {

        Interval startinterval = params.getStartInterval();
        Duration minduration   = params.getMinDuration();
        Duration maxduration   = params.getMaxDuration();

        if (startinterval == null)
            {
            startinterval = Interval.of(
                Instant.now(),
                Duration.ofMinutes(5)
                );
            }

        if (minduration == null)
            {
            minduration = Duration.ofMinutes(30);
            }

        if (maxduration == null)
            {
            maxduration = Duration.ofSeconds(60);
            }

        String query =
            """
            WITH ExpandedDataset AS
                (
                SELECT
                    StartRange.StartRow AS StartRow,
                    COUNT(ExecutionBlocks.BlockStart) AS RowCount,
                    (:totalcores  - IfNull(sum(ExecutionBlocks.MinCores),  0)) AS FreeCores,
                    (:totalmemory - IfNull(sum(ExecutionBlocks.MinMemory), 0)) AS FreeMemory
                FROM
                    (
                    SELECT
                        x + :rangeoffset AS StartRow
                    FROM
                        SYSTEM_RANGE(:rangestart, :rangeend)
                    ) AS StartRange
                LEFT OUTER JOIN
                    ExecutionBlocks
                ON  (
                        (ExecutionBlocks.BlockStart <= StartRange.StartRow)
                        AND
                        ((ExecutionBlocks.BlockStart + ExecutionBlocks.BlockLength) > StartRange.StartRow)
                        )
                GROUP BY
                    StartRange.StartRow
                ),
            ConsecutiveBlocks AS (
                SELECT
                    StartRow,
                    (StartRow + 1) -
                        (
                        ROW_NUMBER() OVER (
                            PARTITION BY (FreeCores >= :minfreecores AND FreeMemory >= :minfreememory)
                            ORDER BY StartRow
                            )
                        ) AS BlockGroup,
                    FreeCores,
                    FreeMemory
                FROM
                    ExpandedDataset
                WHERE
                    FreeCores >= :minfreecores
                    AND
                    FreeMemory >= :minfreememory
                ),
            BlockInfo AS (
                SELECT
                    MIN(StartRow) AS BlockStart,
                    COUNT(*) AS BlockLength,
                    MIN(FreeCores) AS MaxFreeCores,
                    MIN(FreeMemory) AS MaxFreeMemory
                FROM
                    ConsecutiveBlocks
                WHERE
                    BlockGroup IS NOT NULL
                GROUP BY
                    BlockGroup
                HAVING
                    COUNT(*) >= :minblocklength
                ),
            SplitBlocks AS (
                SELECT
                    BlockStart + :maxblocklength * (n - 1) AS BlockStart,
                    LEAST(
                        :maxblocklength,
                        BlockLength - :maxblocklength * (n - 1)
                        ) AS BlockLength,
                    MaxFreeCores,
                    MaxFreeMemory
                FROM
                    BlockInfo,
                    (
                    SELECT
                        x AS n
                    FROM
                        SYSTEM_RANGE(1, :maxblocklength)
                    ) AS Numbers
                WHERE
                    BlockStart + :maxblocklength * (n - 1) < BlockStart + BlockLength
                ),
            BlockResources AS (
                SELECT
                    BlockStart,
                    BlockLength,
                    StartRow,
                    FreeCores,
                    FreeMemory
                FROM
                    ExpandedDataset
                JOIN
                    SplitBlocks
                WHERE
                    StartRow >= BlockStart
                AND
                    StartRow < (BlockStart + BlockLength)
                AND
                    BlockLength >= :minblocklength
                AND
                    BlockLength <= :maxblocklength
                )
            SELECT
                'PROPOSED' AS BlockState,
                NULL AS OfferUuid,
                NULL AS ParentUuid,
                NULL AS ExpiryTime,
                BlockStart,
                BlockLength,
                MIN(FreeCores)  AS MinFreeCores,
                MIN(FreeMemory) AS MinFreeMemory
            FROM
                BlockResources
            GROUP BY
                BlockStart,
                BlockLength
            ORDER BY
                BlockStart  ASC,
                MinFreeCores  DESC,
                MinFreeMemory DESC,
                BlockLength DESC
            LIMIT 4
            """;

            query = query.replace(":totalcores",     String.valueOf(32));
            query = query.replace(":totalmemory",    String.valueOf(32));
            query = query.replace(":rangeoffset",    String.valueOf(
                starttime.getStart().getEpochSecond() / ExecutionBlock.BLOCK_STEP_SECONDS
                ));
            query = query.replace(":rangestart",     String.valueOf(1));
            query = query.replace(":rangeend",       String.valueOf(
                ((24 * 60) / ExecutionBlock.BLOCK_STEP_MINUTES)
                ));
            query = query.replace(":minfreecores",   String.valueOf(
                context.getMinCores()
                ));
            query = query.replace(":minfreememory",  String.valueOf(
                context.getMinMemory()
                ));
            query = query.replace(":minblocklength", String.valueOf(
                minduration.getSeconds() / ExecutionBlock.BLOCK_STEP_SECONDS
                ));
            query = query.replace(":maxblocklength", String.valueOf(
                maxduration.getSeconds() / ExecutionBlock.BLOCK_STEP_SECONDS
                ));

        List<SchedulerBlock> list = JdbcClient.create(template)
            .sql(query)
            .query(new SchedulerBlockMapper())
            .list();

/*
 * Filling in the template with named params like this caused a RuntimeException in the H2 database.
 *
            .param("totalcores",     new Integer(32))
            .param("totalmemory",    new Integer(32))
            .param("rangeoffset",    (starttime.getStart().getEpochSecond() / ExecutionBlock.BLOCK_STEP_SECONDS))
            .param("rangestart",     new Integer(0))
            .param("rangeend",       new Integer(23))
            .param("minfreecores",   context.getMinCores())
            .param("minfreememory",  context.getMinMemory())
            .param("minblocklength", (minduration.getSeconds() / ExecutionBlock.BLOCK_STEP_SECONDS))
            .param("maxblocklength", (maxduration.getSeconds() / ExecutionBlock.BLOCK_STEP_SECONDS))
 */

        return list ;
        }

    /**
     * Null safe translation between time formats.
     * Handles a null timestamp from the database.
     *
     */
    private static Instant timestampToInstant(final Timestamp timestamp)
        {
        if (timestamp != null)
            {
            return timestamp.toInstant();
            }
        else {
            return null ;
            }
        }

    /*
     * Create a SchedulerBlockEntity from a database ResultSet.
     *
     */
    public static class SchedulerBlockMapper implements RowMapper<SchedulerBlock>
        {
        @Override
        public SchedulerBlock mapRow(ResultSet rs, int rowNum)
        throws SQLException
            {
            try {
                SchedulerBlock block = new SchedulerBlockEntity(
                    rs.getLong("BlockStart"),
                    rs.getLong("BlockLength"),
                    rs.getInt("MinFreeCores"),
                    rs.getInt("MinFreeCores"),
                    rs.getInt("MinFreeMemory"),
                    rs.getInt("MinFreeMemory")
                    );
                return block;
                }
            catch (IllegalArgumentException ouch)
                {
                throw new SQLException(
                    ouch
                    );
                }
            }
        }




