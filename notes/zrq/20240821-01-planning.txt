#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Where next ..

    Result:

        Work in progress ...

# -----------------------------------------------------

    Where next ..

        Add logging - done
        Picked a recent article to get the latest fashion.
        https://www.baeldung.com/java-logging-intro
        https://medium.com/@bishalf98/log4j2-in-springboot3-095ab6f15763

        Limit to 4 offers - done

        Comment on current feature - done
        Describe document feature - Susana starting Dave added suggestions.

        Test future start date - done
        Works BUT it ignores the Period part of the Interval
        It interprets it as 'after' the start time rather than
        'within' the interval.
            requested:
              - start: 2024-08-30T09:45:00Z/PT1H
                duration:
                  min: PT2H
            offered:
              executing:
                start: "2024-08-30T09:45:00Z"
                duration: "PT2H"
            offered:
              executing:
                start: "2024-08-30T11:45:00Z"
                duration: "PT2H"
            offered:
              executing:
                start: "2024-08-30T13:45:00Z"
                duration: "PT2H"
            offered:
              executing:
                start: "2024-08-30T15:45:00Z"
                duration: "PT2H"

        New git branch ..

        State in the database - done
        Expiry date in database - done
        Sweep to clear expired - done

        Code to progress state machine.
        Poke to progress state machine.

        Leave VOSpace code as stubs.

        Script demo to show state progression.

# -----------------------------------------------------

        Code to progress state machine.
        Poke to progress state machine.

        What if we moved the transfers into another service.
        stagequote   -> returns quote for time cost
        stageexecute -> performs action, with callback
            single function webservice, kicks off the transfer in the background
            callback when done

        quote data
            quote time cost to transfer data
            (sync)

        prepare session directory
            VOSpace create directory
            /home/{username}/broker/{sessionuuid}
            (sync)

        prepare notebook
            transfer notebook into session directory
            notebook metadata includes location and md5
            notebook:
                location:
                  url: ...
                checks:
                  size: ...
                  md5: ....
            (async)

        transfer data
            resource:
                location:
                  url: ...
                checks:
                  size: ...
                  md5: ....
            check if already present
                check checksum
                pass if same
                fail if differet
            else
                transfer into session directory
                pass on complete
            callback to EB
            (async)

        execute notebook
            CANFAR launch session
            (sync)

        complete notebook
            CANFAR close session
            (sync)

        It means another service, but it keeps the EB code simpler.
        Offload the deatils into another single function service.

        EB needs to keep track of the concurrent tasks it has launched.
        Callback ticks off each task with a single update.
        Then IF all the updates are done, more to the next stage.

        We can simulate the transfer service manually.
        We can trigger the callnback manually.

        Do we implement in Java or Python ?
        There is a CADC Java client (requires cert)
        https://central.sonatype.com/artifact/org.opencadc/cadc-vos-client

        Does Spaninsh VOSpace support cert or just token ?

# -----------------------------------------------------

    ExecutionBroker

        Quoting

            foreach data
                quote data
                    quote time cost to transfer data
                    (sync)

        Preparing

            maintain a list of things that need to happen before it can start
            List<Task> tasklist

                // Count of completed tasks
                int done

                // Preparing is 'done' when count == size
                (done == tasklist.size())

            prepare session directory
                VOSpace create directory
                /home/{username}/broker/{sessionuuid}
                (sync)

            prepare notebook
                transfer notebook into session directory
                notebook metadata includes location and md5
                notebook:
                    location:
                      url: ...
                    checks:
                      size: ...
                      md5: ....
                (async)

            transfer data
                resource:
                    location:
                      url: ...
                    checks:
                      size: ...
                      md5: ....
                check if already present
                    check checksum
                    pass if same
                    fail if differet
                else
                    transfer into session directory
                    pass on complete
                callback to EB
                (async)

        process the list of data resources and volume mounts
        add a Task to the List for each thing
        each task kicks off a remote service passing a callback URL

        the callbacks set the Task state and update the execution state
        if ALL Tasks are completed, execution state is incremented to WAITING

            DROP TABLE IF EXISTS example ;
            CREATE TABLE example (
                ident INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                status CHAR VARYING
                );
            INSERT INTO example (status) VALUES('RUNNING');
            INSERT INTO example (status) VALUES('RUNNING');
            INSERT INTO example (status) VALUES('COMPLETED');
            INSERT INTO example (status) VALUES('COMPLETED');

            -- count each group and the whole set
            -- https://stackoverflow.com/a/60004149
            SELECT status, count(status), sum(count(*)) over () FROM example GROUP BY status
            STATUS      COUNT(STATUS)   SUM(COUNT(*)) OVER ()  
            COMPLETED   2               4
            RUNNING     2               4
            (2 rows, 0 ms)

            done when there is one row and the counts are equal

            SELECT
                status,
                count(status) AS StatusCount,
                (SELECT COUNT(*) FROM example) AS TotalCount
            FROM
                example
            WHERE
                status = 'COMPLETED'

            STATUS      STATUSCOUNT TOTALCOUNT  
            COMPLETED   2   4
            (1 row, 2 ms)

            done when the counts are equal

        cron update looks for execution with state WAITING and starttime < now
        cron update starts the execution and moves status to RUNNING

        Manual HTTP trigger for cron tasks for now.
        Investigate Quartz another time.
        https://www.baeldung.com/quartz

        Not clear if Quartz manages database sessions.

# -----------------------------------------------------

        OK, separate micro services it is.

        OpenAPI based, using parts of the same data model as EB.
        Split the EB schema into parts and include them using $ref.
        https://swagger.io/docs/specification/using-ref/

        Java/Spring based because .. ?
        Because we already have some, so it is more of the same.

        Separate SRCNet Feature to port the code into Python.

        Cheat and put the certs/tokens on disc ..

        ExecutionBroker maintains a list of things todo.
        List<Task> tasklist

        Processing data resource adds a Task to the list.
        Processing executable adds a Task to the list.

        Tasks lie dormant until the ExecutionBroker block moves from
        ACCEPTED to PREPARING

        ExecutionBroker block status updated to PREPARING when
        (status = ACCEPTED) AND ((startime - sum(task-quote)) < now()

            If tasks are sequential use sum(task-quote)
            If tasks are parallel use max(task-quote)

        Tasks make a call to a remote service to kick them off.
        Call includes a callback URL to update when done.
        * Need to have a deliberate break to prevent nested callback before the request completes.
        * Request kicks off a new Thread in the MicroService with a 1s delay at the start.
        * ExecutionBroker updates the task status to RUNNING.
        * Callback backs off if the status isn't already RUNNING.

        ExecutionBroker moves to the next stage when all the tasks are done.
        See above for SQL to transition RUNNING -> WAITING

        Cron looks for ExecutionBroker blocks with (status WAITING) AND (starttime < now).
        Kicks off the execution.

# -----------------------------------------------------

        Prepare the executable

            Session prepartion is create the home directory

            Notebook prepartion is transfer the file.
            Possibly transfer the requirements ?

            DataResource prepartion is transfer the file.
            Check if it is present.
            Quote is based on a fixed table.
                here - 1m
                not here - 1h

            Check if it is present.
                Force replacement ?
            Transfer if required.

# -----------------------------------------------------

    ExecutionBlock state stored in database
    ExecutionResponse stored in memory in HashMap

    ExecutionResponse is a complex tree of polymorphic objects.
    ExecutionBlock is a simplified minimal table.

    Link between ExecutionBlock and ExecutionResponse is the UUID.
    * When the ExecutionBlock is deleted from DB, we should delete the corresponding ExecutionResponse from the HashMap.
    * How do we get a list of deleted blocks ?
    * Huge memory leak issues.
    * Ignore it for the demo.

    When we implement proper persitance using Hibernate
    the main business logic class would be Execution.
    ExecutionResponse is just the serialization in messages.
    ExecutionBlock can be implemented as a view on Execution.

# -----------------------------------------------------

    Define the status change callback.

    Simple POST request that triggers internal status change.

    /callback/{taskident}

        update:
          state:
            COMPLETED
            CANCELLED
            FAILED
        response:
          state:
            ....

    More complex tasks can have their own callback messages.

        TaskStateEnum
            CREATED
            RUNNING
            COMPLETED
            CANCELLED
            FAILED

    On the callout to the micro-service, the mains service sets
    the state from CREATED to RUNNING.
    The new state will only be visible *after* the transaction completes.

    The callback checks the state and only makes the progression
    from RUNNING to COMPLETED if the state is already RUNNING.
    The callback call returns the current state in the response.

    If we a callback happens before the callout has completyed,
    the state will still be CREATED.
    In which case the micro-service should pause and try again.


    interface PreparationStep
        UUID uuid
        UUID parent -> execution/block
        StateEnum state
            CREATED
            RUNNING
            COMPLETED
            CANCELLED
            FAILED

        start();
        run(); <- Runnable in Thread
        complete();
        cancel();
        fail();

    PreparationStepImpl

    class PreparationStepFactory

        PreparationStep select(uuid)
        List<PreparationStep> select(parent)

    interface CanfarPreparationStep extends extends PreparationStep

    class CanfarPreparationStep

        @Override
        void run()
            {
            Call the VOSpace service to create working directory.
            }


    Where do we put the working directory path ?
    Platform (CANFAR) specific data for the Execution.
    Add to the Execution properties ?
    canfar.home = /home/{user}/broker/{execution}/

    Or we define a new class
    interface CanfarExecution extends PlatformExecution
        {
        String getUserName();
        String getSessionHome();
        }

    CanfarExecutionImpl extends ExecutionResponseImpl
    implements CanfarExecution
        {
        ....
        }

    interface CanfarPreparationStep extends PreparationStep
        {
        CanfarExecution getParent();
        }

    class CanfarPreparationImpl implements CanfarPreparationStep
        {
        @Override
        void run()
            {
            Call the VOSpace service to create working directory.
            }
        }

    interface DataStagingStep extends PreparationStep

        volume: -> volume mount
          compute:  -> compute resource
          resource: -> data resource

    interface VOSpaceStagingStep extends DataStagingStep

    class VOSpaceStagingImpl extends DataStagingImpl extends PreparationStepImpl
        {
        @Override
        void run()
            {
            transfer data from external resource into local VOSpace
            }
        }

    Processing a CanfarExecution adds steps to the execution.

    CanfarExecutionImpl

        String getUserName();
        String getSessionHome();
        void setSessionHome(String path);

        void process()
            {
            steps.add(
                new CanfarPreparationStepImpl(
                    this
                    )
                )
            for each volume mount
                {
                steps.add(
                    new VOSpaceStagingImpl(
                        volume,
                        canfarstep.getSessionHome()
                        )
                    );
                }
            }

# -----------------------------------------------------

    Two use cases for the PreparationSteps.
    1) As part of the quoting process.
    2) As part of the executuion process.

    Do we create one, or two instances.
    Would the number of cores effect the startup time ?
    Assume not.

    The main delays will be staging data.
    We need to know the staging delay before we can qute the start time.
    So we need to create a list of PreparationSteps during validation.
    Then sum or max the quoted times and use that as the block starting time.

    We can then copy/transfer the list of PreparationSteps to each of the offers.
    An Execution - has many Offers.
    One offer is accepted.
    The list of PreparationSteps is attached to the Execution.
    In our current architecture that's equivalent to the OfferStep.

    So the platform Execution links to the OfferSet, not the ExecutionResponse.

# -----------------------------------------------------

    Add an Execution to the OfferSet (one day OfferSet becomes Execution).
    Validation process adds PreparationSteps to the Execution.
    Validation adds the cost estimates from the PreparationSteps to create an overall preparationCost.
    (*) Add a cost estimate to PreparationStep
    Validation uses this to move the minimum start time forward to give the service enough time to prepare.

    An Offer is accepted, setting the state to ACCEPTED.
    Cron updates the ACCEPTED state to PREPARING when ....

    # ----
    Interesting, do we have a problem?
    In order to prepare for the execution, we need to have at least some of the resources in place.
    Specifically, for a volume mount, does the VM or container need to be running ?
    With a VM, the mount is done when the VM is created.
    With a Docker container, the mount is done when the container is created.
    With a Kubernetes Pod, the mount done when the Pod is started.
    ...
    In general, we need to have the disc space allocated, but not the compute resources

    The offer start time is the RUNNING start time when the compute is executuing.
    With a batch job, it is when the container/VM or whatever is started.
    With an interactive job, starting the container/VM should be part of preparing.
    So that we jump into a running notebook at the offered starttime.
    Do that later.
    # ----

    We need to calculte the preparation start time.
    prepstart = starttime - prepcost

    Cron updates the Execution () state to PREPARING when
        (state = ACCEPTED) AND (prepstart <= now)
    This triggers the start of each of the PreparationSteps.
    Initially we run then sequentially, later designs can do them concurrently.
        PreparationStep run() sets the step state to RUNNING.
        PreparationStep run() calls an external micro-service to do stuff.
            External micro-service does stuff ....
        External service uses callback endpoint to set step state to COMPLETED.
        Setting one step to COMPLETED starts the next.

        On callback, if all of the steps are COMPLETED, then Execution state is set to WAITING.

    Cron updates the Execution (ExecutionResponse) state to RUNNING when
        (state = WAITING) AND (mainstart <= now)

    Cron updates the Execution (ExecutionResponse) state to FINISHING when
        (state = RUNNING) AND ((mainstart + duration) <= now)
        Does this also call out to cancel the CanfarSession ?

    # ----

    The Executable has a prepstart and prepcost value.
    Each DataResource has a prepstart and prepcost value.
    Each ExecutionResponse offer has a prepstart and prepcost value, which is the sum of the PreparationSteps.

    Because we are CANFAR based, we add a CanfarExecution to our validation context.
    Validating a notebook Executable adds a CanfarNotebookPreparationStep.
    Validating a data resource adds a DataResourcePreparationStep.

    We use the sum of the prepstart values to calculate the minimum start time (now + prepstartsum)
    and the maximum start time (requeststart - prepstartsum).
    If the minimum is after the maximum, then we don't have time to prepare.

    Use the minimum starttime as the seed for the generate method.
    Generate the offers.

    Link the CanfarExecution to our top level OfferSetResponse as a way to persist it.

    OfferSetAPI
        Execution getExecution()
        ExecutionResponse getAccepted()
        List<ExecutionResponse> getOffers()

    OfferSetResponse - generated bean

    OfferSetResponseImpl
        extends OfferSetResponse
        implements OfferSetAPI

    ExecutionResponseAPI
        OfferSetResponseAPI getParent()
        CanfarExecution getExecution() = getParent().getExecution()

    ExecutionResponseImpl
        extends ExecutionResponse
        implements ExecutionResponseAPI

    ExecutionFactory
        Execution create(OfferSetResponse offerset)

    CanfarExecutionFactory
        extends ExecutionFactory
        CanfarExecution create(OfferSetResponse offerset)

    Execution
        OfferSetResponse getOfferSet()
        Duration getPrepCost() // sum of step costs
        List<PreparationStep> getPreparationSteps()

    CanfarExecution
        extends Execution
        List<CanfarPreparationStep> getPreparationSteps()
        String getUserName()
        String getUserHome()
        String getSessionName()
        String getSessionHome()

    PreparationStepFactory
        select(UUID) // Callback uses this to update the step

    CanfarPreparationStepFactory
        extends PreparationStepFactory
        CanfarDataResourceStep createNotebookStep(CanfarExecution parent, ...);
        CanfarPreparationStep  createDataResourceStep(CanfarExecution parent, ...);

    PreparationStep
        Duration  getPrepCost()
        Execution getParent()

    CanfarPreparationStep
        extends PreparationStep
        CanfarExecution getParent()

    CanfarNotebookPreparationStep
        extends CanfarPreparationStep
        String getNotebook()


