#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Create the new schema ....

    Result:

        Work in progress ...

# -----------------------------------------------------

    How do we move from here to there ....

    Start by moving all of the objects out of the current openapi.yaml
    Initially keep the schema itself the same, but gradually evolve them.

    All the time, keeping checking the Java and Python code generators still work.


# -----------------------------------------------------
# Run our OpenAPI pre-processor.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --interactive \
        --name python-builder \
        --volume "${CALYCOPIS_CODE}/openapi:/openapi:rw,z" \
        --volume "${CALYCOPIS_CODE}/python:/python:rw,z" \
        fedora:42 \
        bash

        #
        # Run our schema processor.

        dnf install -y \
            python3 \
            python3-pip

        pip3 install \
            pyyaml

        /openapi/bin/schema-processor.py \
            /openapi/schema/openapi.yaml \
            /openapi/build/combined-openapi.yaml

    >   ....
    >   ....



# -----------------------------------------------------
# Test the FastAPI generator.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --interactive \
        --name python-fastapi \
        --volume "${CALYCOPIS_CODE}/openapi:/openapi:rw,z" \
        --volume "${CALYCOPIS_CODE}/python:/python:rw,z" \
        fedora:42 \
        bash

        rm -rf /python/albert
        mkdir  /python/albert

        dnf install -y \
            wget

        wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.13.0/openapi-generator-cli-7.13.0.jar \
             -O /tmp/openapi-generator.jar

        dnf install -y \
            java-latest-openjdk

        java -jar /tmp/openapi-generator.jar \
            generate \
            --generator-name python-fastapi \
            --input-spec /openapi/build/combined-openapi.yaml \
            --output     /python/albert

    >   ....
    >   ....


# -----------------------------------------------------
# Check to see if the processed schema still works in Java.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --interactive \
        --publish 8082:8082 \
        --name spring-builder \
        --volume "${HOME}/.m2/repository:/maven/repository:rw,z" \
        --volume "${CALYCOPIS_CODE}/java:/java:rw,z" \
        --volume "${CALYCOPIS_CODE}/openapi:/openapi:rw,z" \
        --volume "${CALYCOPIS_CODE}/examples:/examples:rw,z" \
        ghcr.io/ivoa/calycopis/java-builder:2024.08.30 \
        bash

    #
    # Add a reference to the Maven repository on the host.
    # Only need this if we want the internal Maven build to share the same repo as the host.
    mkdir ${HOME}/.m2
    cat > ${HOME}/.m2/settings.xml << EOF
<settings>
    <localRepository>/maven/repository</localRepository>
</settings>
EOF

    pushd /java/spring/spring-openapi ; ./mvnw clean install ; popd

        ....
        ....


    pushd /java/spring/spring-webapp  ; ./mvnw clean spring-boot:run ; popd

        ....
        ....


# -----------------------------------------------------
# -----------------------------------------------------
# Launch second terminal ...
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        spring-builder \
            bash

        ....
        ....



