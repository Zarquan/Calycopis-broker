#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Developing the internal business logic.

    Result:

        Looking at the structured log messages.
        https://messagetemplates.org/

            Are the log messages just too complicated ?
            I added a plain message to make it readable.

            If we are going to do this, then we need to wrap it in
            a functional class that hides the details.

            response.message(
                new DebugMessage(
                    "HttpServletRequest [{url}]",
                    Map.of(
                        "url",
                        servletrequest.getRequestURL().toString()
                        )
                    )
                )

            We would have to write our own template processor to see what the messages look like :-(
            https://messagetemplates.org/ uses {key}, but the common Java libraries use ${key}

            https://stackoverflow.com/questions/3655424/string-replacement-in-java-similar-to-a-velocity-template

            https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html
                "Example message with two values, {0} and {1}"
            https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/StringSubstitutor.html
                "The {0} jumped over the {1}."
                 new Object[] {
                    "fox",
                    "dog"
                    };
                "The ${animal} jumped over the ${target}."
                 new Map<String, Object> {
                    {"animal" "fox"},
                    {"target" "dog"}
                    };

            Possibly better to adopt a common pattern ${} rather than just {}.
            Or, apply a regex that replaces {} with ${} ?

        We can add the HttpServletRequest code to a base class for our delegates.

            String getUrl() {
                return nativerequest.getNativeRequest(HttpServletRequest.class).getRequestURL().toString();
                }

        Looking at the results of several levels of inheritance.

            Why does an offerset need a name ?
            Does a negative answer need an expiry date ?
            Putting the YES|NO at the end really bugs me.
            Complicated inheritance looses control over the serialization sequence.

            Inheriting from AbstractPolymorph pulls all the discriminators
            up into one class.
            It is clearer in we have separate bases for each set of things
            AbstractExecutable, AbstractComputeResource, AbstractStorageResource
            and AbstractDateResource.

        Still can't array elemewnt names right in XML.
        sigh


# -----------------------------------------------------
# Start a new branch.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        branchname=internals
        newbranch=$(date '+%Y%m%d')-zrq-${branchname:?}

        git checkout main

        git checkout -b "${newbranch:?}"

        git push --set-upstream 'origin' "$(git branch --show-current)"

    >   ....
    >   ....


# -----------------------------------------------------
# Launch a container to generate the Java Spring classes.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi

            podman run \
                --rm \
                --tty \
                --interactive \
                --name spring-builder \
                --volume "$(pwd)/ivoa:/ivoa:ro,z" \
                --volume "$(pwd)/impl/java/spring:/spring:rw,z" \
                fedora \
                bash

    >   ....
    >   ....


# -----------------------------------------------------
# Install the Java development kit.
#[root@container]

    dnf install -y \
        which \
        java-latest-openjdk-devel

    cat >>  "${HOME}/.bashrc" << 'EOF'
export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:/bin/java::")
EOF

    source "${HOME}/.bashrc"

    echo "JAVA_HOME [${JAVA_HOME}]"

    >   ....
    >   ....


# -----------------------------------------------------
# Generate the service code.
#[root@container]

    pushd /spring/spring-openapi ; ./mvnw clean install ; popd

    pushd /spring/spring-webapp ; ./mvnw clean spring-boot:run ; popd

    >   ....
    >   ....


# -----------------------------------------------------
# -----------------------------------------------------
# Test the service.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        spring-builder \
        bash

    dnf install -y \
        xmlstarlet \
        curl \
        jq \
        yq


cat > /tmp/test-001.yaml  << EOF
schedule:
  - start: 2024-07-08T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-09T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-10T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
executable:
  properties:
  name: My test executable
  type: urn:docker-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
  network:
    ports:
      - internal: 3000
        protocol: TCP
resources:
  compute:
    - properties:
      name: My test compute resource
      type: urn:simple-compute-resource
      cores:
        min: 2
        max: 5
      memory:
        min: 20
        max: 50
  storage:
    - properties:
      name: My test storage resource
      type: urn:simple-storage-resource
      size:
        min: 200
        max: 500
        units: none
  data:
    - properties:
      name: My test data resource
      type: urn:simple-data-resource
      location: http://data.example.org/downloads/hdf5t8
EOF

    # YAML in YAML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/request" \
    | yq '.'


    >   uuid: "ef0e4550-4572-11ef-92b2-57b016ee4c91"
    >   name: "My offers"
    >   href: "https://..../offerset/ef0e4550-4572-11ef-92b2-57b016ee4c91"
    >   expires: "2024-07-19T02:07:21.1062975Z"
    >   offers:
    >     - uuid: "ef0e9371-4572-11ef-92b2-57b016ee4c91"
    >       name: "My execution"
    >       executable:
    >         type: "urn:docker-container-0.1"
    >         name: "My test executable"
    >         image: "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13"
    >         privileged: false
    >         network:
    >           ports:
    >             - internal: "3000"
    >               protocol: "TCP"
    >       href: "https://..../execution/ef0e9371-4572-11ef-92b2-57b016ee4c91"
    >       state: "OFFERED"
    >   result: "YES"


# -----------------------------------------------------
# Test the messages we get for an unknown executable.
#[root@container]

cat > /tmp/test-002.yaml  << EOF
executable:
  properties:
  name: My test executable
  type: urn:single-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
EOF

    # YAML in YAML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-002.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/request" \
    | yq '.'

    >   uuid: "a13d8e38-4575-11ef-ab5e-7793e60e8bc8"
    >   name: "My offers"
    >   messages:
    >     - type: "https://example.org/message-types/unknown-executable"
    >       time: "2024-07-19T02:21:39.044817629Z"
    >       template: "[{code}] Unable to provide requested executable [{type}]"
    >       values:
    >         code: "2415"
    >         type: "urn:single-container-0.1"
    >       message: "[2415] Unable to provide requested executable [urn:single-container-0.1]"
    >   href: "https://..../offerset/a13d8e38-4575-11ef-ab5e-7793e60e8bc8"
    >   expires: "2024-07-19T02:26:39.044356298Z"
    >   result: "NO"

    #
    # Why does an offerset need a name ?
    # Are the log messages just too complicated ?
    # Does a negative answer need an expiry date ?
    # Putting the YES|NO at the end really bugs me.
    #


    >   uuid: "b7ae0a94-458c-11ef-a830-e317c7080b1f"
    >   name: "My offers"
    >   messages:
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T05:06:55.114779782Z"
    >       template: "[{code}] HttpServletRequest [{url}]"
    >       values:
    >         code: "DEBUG"
    >         url: "http://127.0.0.1:8082/request"
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T05:06:55.11550679Z"
    >       template: "[{code}] ExecutionBroker version [{version}]"
    >       values:
    >         code: "DEBUG"
    >         version: "0.1"
    >     - type: "https://example.org/message-types/unknown-executable"
    >       time: "2024-07-19T05:06:55.115809193Z"
    >       template: "[{code}] Unable to provide requested executable [{type}]"
    >       values:
    >         code: "ERROR"
    >         type: "urn:single-container-0.1"
    >       message: "[2415] Unable to provide requested executable [urn:single-container-0.1]"
    >   href: "https://..../offerset/b7ae0a94-458c-11ef-a830-e317c7080b1f"
    >   expires: "2024-07-19T05:11:55.114707748Z"
    >   result: "NO"


    >   uuid: "d24d954f-4590-11ef-b960-8592197b1974"
    >   name: "My offers"
    >   messages:
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T05:36:17.769459543Z"
    >       level: "DEBUG"
    >       template: "HttpServletRequest [{url}]"
    >       values:
    >         url: "http://127.0.0.1:8082/request"
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T05:36:17.769755795Z"
    >       level: "DEBUG"
    >       template: "ExecutionBroker version [{version}]"
    >       values:
    >         version: "0.1"
    >     - type: "https://example.org/message-types/error"
    >       time: "2024-07-19T05:36:17.770093758Z"
    >       level: "ERROR"
    >       template: "Unable to provide requested executable [{type}]"
    >       values:
    >         type: "urn:single-container-0.1"
    >   href: "https://..../offerset/d24d954f-4590-11ef-b960-8592197b1974"
    >   expires: "2024-07-19T05:41:17.768716077Z"
    >   result: "NO"



    >   uuid: "ba9cf008-459a-11ef-a154-e923bf8385b4"
    >   messages:
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T06:47:12.992180866Z"
    >       level: "DEBUG"
    >       template: "HttpServletRequest [${url}][${context}][${servlet}]"
    >       values:
    >         servlet: "/request"
    >         context: ""
    >         url: "http://127.0.0.1:8082/request"
    >       message: "HttpServletRequest [http://127.0.0.1:8082/request][][/request]"
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T06:47:13.016807596Z"
    >       level: "DEBUG"
    >       template: "ExecutionBroker version [${version}]"
    >       values:
    >         version: "0.1"
    >       message: "ExecutionBroker version [0.1]"
    >     - type: "https://example.org/message-types/error"
    >       time: "2024-07-19T06:47:13.017162409Z"
    >       level: "ERROR"
    >       template: "Unable to provide requested executable [${type}]"
    >       values:
    >         type: "urn:single-container-0.1"
    >       message: "Unable to provide requested executable [urn:single-container-0.1]"
    >   href: "https://..../offerset/ba9cf008-459a-11ef-a154-e923bf8385b4"
    >   expires: "2024-07-19T06:52:12.991332838Z"
    >   result: "NO"



    >   uuid: "65f27188-459c-11ef-9ef7-71c878c6b039"
    >   messages:
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T06:59:09.9380152Z"
    >       level: "DEBUG"
    >       template: "HttpServletRequest [${url}][${context}][${servlet}]"
    >       values:
    >         servlet: "/request"
    >         context: ""
    >         url: "http://127.0.0.1:8082/request"
    >       message: "[DEBUG] HttpServletRequest [http://127.0.0.1:8082/request][][/request]"
    >     - type: "https://example.org/message-types/info"
    >       time: "2024-07-19T06:59:09.938184229Z"
    >       level: "INFO"
    >       template: "ExecutionBroker version [${version}]"
    >       values:
    >         version: "0.1"
    >       message: "[INFO] ExecutionBroker version [0.1]"
    >     - type: "https://example.org/message-types/error"
    >       time: "2024-07-19T06:59:09.938387375Z"
    >       level: "ERROR"
    >       template: "Unable to provide requested executable [${type}]"
    >       values:
    >         type: "urn:single-container-0.1"
    >       message: "[ERROR] Unable to provide requested executable [urn:single-container-0.1]"
    >   href: "https://..../offerset/65f27188-459c-11ef-9ef7-71c878c6b039"
    >   expires: "2024-07-19T07:04:09.937876223Z"
    >   result: "NO"


    # YAML in YAML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/request" \
    | yq '.'

    >   uuid: "4e2a08b6-459c-11ef-9ef7-71c878c6b039"
    >   messages:
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-07-19T06:58:30.038264726Z"
    >       level: "DEBUG"
    >       template: "HttpServletRequest [${url}][${context}][${servlet}]"
    >       values:
    >         servlet: "/request"
    >         context: ""
    >         url: "http://127.0.0.1:8082/request"
    >       message: "[DEBUG] HttpServletRequest [http://127.0.0.1:8082/request][][/request]"
    >     - type: "https://example.org/message-types/info"
    >       time: "2024-07-19T06:58:30.063457116Z"
    >       level: "INFO"
    >       template: "ExecutionBroker version [${version}]"
    >       values:
    >         version: "0.1"
    >       message: "[INFO] ExecutionBroker version [0.1]"
    >   href: "https://..../offerset/4e2a08b6-459c-11ef-9ef7-71c878c6b039"
    >   expires: "2024-07-19T07:03:30.037520871Z"
    >   offers:
    >     - uuid: "4e2e4e77-459c-11ef-9ef7-71c878c6b039"
    >       name: "My execution"
    >       executable:
    >         type: "urn:docker-container-0.1"
    >         name: "My test executable"
    >         image: "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13"
    >         privileged: false
    >         network:
    >           ports:
    >             - internal: "3000"
    >               protocol: "TCP"
    >       href: "https://..../execution/4e2e4e77-459c-11ef-9ef7-71c878c6b039"
    >       state: "OFFERED"
    >   result: "YES"


    # YAML in JSON out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8082/request" \
    | jq '.'

    >   {
    >     "uuid": "808c49d9-459c-11ef-9ef7-71c878c6b039",
    >     "messages": [
    >       {
    >         "type": "https://example.org/message-types/debug",
    >         "time": "2024-07-19T06:59:54.566634406Z",
    >         "level": "DEBUG",
    >         "template": "HttpServletRequest [${url}][${context}][${servlet}]",
    >         "values": {
    >           "servlet": "/request",
    >           "context": "",
    >           "url": "http://127.0.0.1:8082/request"
    >         },
    >         "message": "[DEBUG] HttpServletRequest [http://127.0.0.1:8082/request][][/request]"
    >       },
    >       {
    >         "type": "https://example.org/message-types/info",
    >         "time": "2024-07-19T06:59:54.566750543Z",
    >         "level": "INFO",
    >         "template": "ExecutionBroker version [${version}]",
    >         "values": {
    >           "version": "0.1"
    >         },
    >         "message": "[INFO] ExecutionBroker version [0.1]"
    >       }
    >     ],
    >     "href": "https://..../offerset/808c49d9-459c-11ef-9ef7-71c878c6b039",
    >     "expires": "2024-07-19T07:04:54.566541954Z",
    >     "offers": [
    >       {
    >         "uuid": "808c49da-459c-11ef-9ef7-71c878c6b039",
    >         "name": "My execution",
    >         "executable": {
    >           "type": "urn:docker-container-0.1",
    >           "name": "My test executable",
    >           "image": "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13",
    >           "privileged": false,
    >           "network": {
    >             "ports": [
    >               {
    >                 "internal": "3000",
    >                 "protocol": "TCP"
    >               }
    >             ]
    >           }
    >         },
    >         "href": "https://..../execution/808c49da-459c-11ef-9ef7-71c878c6b039",
    >         "state": "OFFERED"
    >       }
    >     ],
    >     "result": "YES"
    >   }


    # YAML in XML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/xml" \
        "http://127.0.0.1:8082/request" \
    | xmlstarlet fo

    >   <?xml version="1.0"?>
    >   <offers-response>
    >     <uuid>9e87eacb-459c-11ef-9ef7-71c878c6b039</uuid>
    >     <messages>
    >       <messages>
    >         <type>https://example.org/message-types/debug</type>
    >         <time>2024-07-19T07:00:44.86977599Z</time>
    >         <level>DEBUG</level>
    >         <template>HttpServletRequest [${url}][${context}][${servlet}]</template>
    >         <values>
    >           <servlet>/request</servlet>
    >           <context/>
    >           <url>http://127.0.0.1:8082/request</url>
    >         </values>
    >         <message>[DEBUG] HttpServletRequest [http://127.0.0.1:8082/request][][/request]</message>
    >       </messages>
    >       <messages>
    >         <type>https://example.org/message-types/info</type>
    >         <time>2024-07-19T07:00:44.869888043Z</time>
    >         <level>INFO</level>
    >         <template>ExecutionBroker version [${version}]</template>
    >         <values>
    >           <version>0.1</version>
    >         </values>
    >         <message>[INFO] ExecutionBroker version [0.1]</message>
    >       </messages>
    >     </messages>
    >     <href>https://..../offerset/9e87eacb-459c-11ef-9ef7-71c878c6b039</href>
    >     <expires>2024-07-19T07:05:44.869678369Z</expires>
    >     <offered>
    >       <offered>
    >         <uuid>9e87eacc-459c-11ef-9ef7-71c878c6b039</uuid>
    >         <name>My execution</name>
    >         <executable type="urn:docker-container-0.1">
    >           <name>My test executable</name>
    >           <image>ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13</image>
    >           <privileged>false</privileged>
    >           <network>
    >             <ports>
    >               <ports>
    >                 <internal>3000</internal>
    >                 <protocol>TCP</protocol>
    >               </ports>
    >             </ports>
    >           </network>
    >         </executable>
    >         <href>https://..../execution/9e87eacc-459c-11ef-9ef7-71c878c6b039</href>
    >         <state>OFFERED</state>
    >       </offered>
    >     </offered>
    >     <result>YES</result>
    >   </offers-response>

