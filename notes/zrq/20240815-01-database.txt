#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Using an embedded H2 database.
        https://www.baeldung.com/spring-boot-h2-database

        Create the select queries needed to find available slots.

    Result:

        Work in progress ...

# -----------------------------------------------------

# -----------------------------------------------------
# Launch a container to work in with published ports.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    pushd "${CALYCOPIS_CODE}"

        pushd openapi

            podman run \
                --rm \
                --tty \
                --interactive \
                --publish 8082:8082 \
                --name spring-builder \
                --volume "$(pwd)/ivoa:/ivoa:ro,z" \
                --volume "$(pwd)/impl/java/spring:/spring:rw,z" \
                fedora \
                bash

    >   ....
    >   ....


# -----------------------------------------------------
# Install the Java development kit.
#[root@spring-builder]

    dnf install -y \
        which \
        java-latest-openjdk-devel

    cat >>  "${HOME}/.bashrc" << 'EOF'
export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:/bin/java::")
EOF

    source "${HOME}/.bashrc"

    echo "JAVA_HOME [${JAVA_HOME}]"

    >   ....
    >   ....


# -----------------------------------------------------
# Generate the Java classes from the OpenAPI spec.
#[root@spring-builder]

    pushd /spring/spring-openapi

        ./mvnw clean install

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Compile and run our webapp classes.
#[root@spring-builder]

    pushd /spring/spring-webapp

        ./mvnw clean spring-boot:run

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Short form.
#[root@spring-builder]

    pushd /spring/spring-openapi ; ./mvnw clean install ; popd

    pushd /spring/spring-webapp  ; ./mvnw clean spring-boot:run ; popd


# -----------------------------------------------------
# Connect to the database admin pages.
#[user@desktop]

    http://localhost:8082/h2-console

    url: jdbc:h2:mem:testdb
    username: sa
    password: password


# -----------------------------------------------------
# Experiment with the database.
#[sa@testdb]

    SELECT x FROM SYSTEM_RANGE(0, ((24*1)-1));
    SELECT x FROM SYSTEM_RANGE(0, ((24*7)-1));

    DROP VIEW IF EXISTS x_free;
    DROP VIEW IF EXISTS x_load;
    DROP TABLE IF EXISTS x_session;
    CREATE TABLE x_session(
        ident INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        start INT,
        duration INT,
        cores    INT,
        memory   INT
        );

    INSERT INTO x_session (start, duration, cores, memory) VALUES( 3, 3, 2, 2);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 4, 3, 2, 1);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 5, 2, 2, 2);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 5, 3, 2, 1);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 6, 3, 2, 2);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 7, 3, 2, 1);

    INSERT INTO x_session (start, duration, cores, memory) VALUES( 12, 3, 2, 3);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 13, 3, 2, 1);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 14, 3, 2, 4);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 15, 3, 2, 1);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 16, 3, 2, 5);
    INSERT INTO x_session (start, duration, cores, memory) VALUES( 17, 3, 2, 1);

    SELECT * FROM x_session ;

    >   
    >   IDENT   START   DURATION    CORES   MEMORY
    >   1       3	    3           2       2
    >   2       4       4           2       1
    >   3       5       3           2       2
    >   4       5       2           2       1
    >   5       6       3           2       2
    >   6       7       4           2       1
    >   7       12      3           2       3
    >   8       13      4           2       1
    >   9       14      3           2       4
    >   10      15      4           2       1
    >   11      16      3           2       5
    >   12      17      4           2       1
    >   (12 rows, 0 ms)--END--
    >   
    >    0              0
    >    1              0
    >    2              0
    >    3 2            2
    >    4 2 2          4
    >    5 2 2 2 2      8
    >    6   2 2 2 2    8
    >    7   2   2 2 2 10
    >    8       2 2 2  6
    >    9           2  2
    >   10           2  2
    >   11              0
    >   12 2            2
    >   13 2 2          4
    >   14 2 2 2        6
    >   15   2 2 2      6
    >   16   2 2 2 2    8
    >   17       2 2 2  6
    >   18       2 2 2  6
    >   19           2  2
    >   20           2  2
    >   21              0
    >   22              0
    >   23              0
    >   
    >   
    >       DROP VIEW IF EXISTS x_load ;
    >       CREATE VIEW x_load AS (
    >           SELECT
    >               x_range.x_hour AS start_hour,
    >               count(x_session.start) AS load_count,
    >               IfNull(sum(cores), 0) AS load_cores,
    >               IfNull(sum(memory), 0) AS load_memory
    >           FROM
    >               (SELECT x AS x_hour FROM SYSTEM_RANGE(0, ((24*1)-1))) AS x_range
    >           LEFT OUTER JOIN
    >               x_session
    >           ON
    >               ((x_session.start <= x_range.x_hour) AND ((x_session.start + x_session.duration) > x_range.x_hour))
    >           GROUP BY
    >               x_range.x_hour
    >           HAVING
    >               (load_cores <= 6)
    >           AND
    >               (load_memory <= 6)
    >           );
    >       SELECT * FROM x_load ;
    >   
    >   
    >   START_HOUR  LOAD_COUNT  LOAD_CORES  LOAD_MEMORY
    >   0           0           0           0
    >   1           0           0           0
    >   2           0           0           0
    >   3           1           2           2
    >   4           2           4           3
    >   7           3           6           4
    >   8           2           4           3
    >   9           1           2           1
    >   10          0           0           0
    >   11          0           0           0
    >   12          1           2           3
    >   13          2           4           4
    >   15          3           6           6
    >   18          2           4           6
    >   19          1           2           1
    >   20          0           0           0
    >   21          0           0           0
    >   22          0           0           0
    >   23          0           0           0


    DROP VIEW IF EXISTS x_free;
    CREATE VIEW x_free AS (
        SELECT
            start_hour AS start_hour,
            load_count AS load_count,
            (8 - load_cores)  AS free_cores,
            (8 - load_memory) AS free_memory
        FROM
            (
            SELECT
                start_hour,
                load_count,
                load_cores,
                load_memory
            FROM
                x_load
            )
        );
    SELECT * FROM x_free ;

    >   
    >   START_HOUR  LOAD_COUNT  FREE_CORES  FREE_MEMORY
    >   0           0           8           8
    >   1           0           8           8
    >   2           0           8           8
    >   3           1           6           6
    >   4           2           4           5
    >   7           3           2           4
    >   8           2           4           5
    >   9           1           6           7
    >   10          0           8           8
    >   11          0           8           8
    >   12          1           6           5
    >   13          2           4           4
    >   15          3           2           2
    >   18          2           4           2
    >   19          1           6           7
    >   20          0           8           8
    >   21          0           8           8
    >   22          0           8           8
    >   23          0           8           8
    >   (19 rows, 4 ms)


    DROP VIEW IF EXISTS x_blocks;
    CREATE VIEW x_blocks AS (
        select
            b_ident,
            min(start_hour) AS b_start,
            max(start_hour) AS b_end,
            count(start_hour) AS b_duration,
            min(free_cores) AS b_min_cores,
            max(free_cores) AS b_max_cores
        from
            (
            select
                x_free.*,
                (row_number() over ()  - 1) as x_rownum,
                (start_hour - (row_number() over ()  - 1)) AS b_ident
            from
                x_free
            )
        group by b_ident
        );

    SELECT * FROM x_blocks ORDER BY b_start ASC ;

    >   B_IDENT B_START B_END   B_DURATION  B_MIN_CORES B_MAX_CORES
    >   0       0       4       5           4           8
    >   2       7       13      7           2           8
    >   3       15      15      1           2           2
    >   5       18      23      6           4           8
    >   (4 rows, 4 ms)


    SELECT * FROM x_blocks ORDER BY b_duration DESC, b_min_cores DESC ;

    >   B_IDENT     B_START     B_END   B_DURATION  B_MIN_CORES B_MAX_CORES
    >   2           7           13      7           2           8
    >   5           18          23      6           4           8
    >   0           0           4       5           4           8
    >   3           15          15      1           2           2
    >   (4 rows, 3 ms)


    SELECT * FROM x_blocks WHERE b_duration >= 5 ORDER BY b_min_cores DESC, b_duration DESC ;

    >   B_IDENT B_START B_END   B_DURATION  B_MIN_CORES B_MAX_CORES
    >   5       18      23      6           4           8
    >   0       0       4       5           4           8
    >   2       7       13      7           2           8
    >   (3 rows, 7 ms)


    SELECT * FROM x_blocks WHERE b_duration >= 5 ORDER BY b_start ASC, b_min_cores DESC, b_duration DESC ;

    >   B_IDENT B_START B_END   B_DURATION  B_MIN_CORES B_MAX_CORES
    >   0       0       4       5           4           8
    >   2       7       13      7           2           8
    >   5       18      23      6           4           8
    >   (3 rows, 5 ms)


unix timestamp truncated to the hour minus offset from start



