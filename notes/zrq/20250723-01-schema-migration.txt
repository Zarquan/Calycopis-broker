#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Build the Calycopis-broker classes using the schema from Calycopis-schema.

    Result:

        Work in progress ...


# -----------------------------------------------------

    Calycopis-broker
        |
        +-- java
              |
              +-- spring
                    |
                    +-- spring-openapi
                           |
                           +-- openapi
                           |     |
                           |     +-- openapi.yaml
                           |     |
                           |     +-- target
                           |           |
                           |           +-- ....
                           |           +-- ....
                           |
                           +-- target
                                 |
                                 +-- ....
                                 +-- ....


    Calycopis-schema
        |
        +-- schema
              |
              +-- ....
              +-- ....


# -----------------------------------------------------
# Build the combined schema.
#[user@desktop]

    #
    # TODO Publish the schema processor as a Docker container.
    #

    source "${HOME:?}/calycopis.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name python-builder \
        --volume "${TREBULA_CODE}:/trebula:rw,z" \
        --volume "${ISOBEON_CODE}:/isobeon:rw,z" \
        --volume "${CALYCOPIS_CODE}:/calycopis:rw,z" \
        fedora:42 \
        bash

        dnf install -y \
            python3 \
            python3-pip

        pip3 install \
            pyyaml

        source=$(
            mktemp --directory
            )

        pushd "${source}"
            ln -s /calycopis/java/spring/spring-openapi/openapi/openapi.yaml
            ln -s /trebula/schema
        popd

        target=/calycopis/java/spring/spring-openapi/openapi/target
        ls -al "${target}"
        rm -rf "${target}"
        mkdir  "${target}"

        /isobeon/schema-processor.py \
            "${source}/openapi.yaml" \
            "${target}/openapi-full.yaml"

        ls -al "${target}"


# -----------------------------------------------------
# Check the result.
#[user@desktop]

    source "${HOME:?}/calycopis.env"

    ls -al "${CALYCOPIS_CODE}/java/spring/spring-openapi/openapi/target"

    >   ....
    >   ....
    >   -rw-r--r--. 1 Zarquan Zarquan 43101 Jul 23 06:11 openapi-full.yaml


# -----------------------------------------------------
# Build the broker.
#[user@desktop]

    source "${HOME:?}/calycopis.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --publish 8082:8082 \
        --name spring-builder \
        --volume "${HOME}/.m2/repository:/maven/repository:rw,z" \
        --volume "${CALYCOPIS_CODE}/java:/java:rw,z" \
        --volume "${CALYCOPIS_CODE}/examples:/examples:rw,z" \
        ghcr.io/ivoa/calycopis/java-builder:2024.08.30 \
        bash

    #
    # TODO Add this to the container image.
    # Add a reference to the Maven repository on the host.
    # Only need this if we want the internal Maven build to share the same repo as the host.
    mkdir ${HOME}/.m2
    cat > ${HOME}/.m2/settings.xml << EOF
<settings>
    <localRepository>/maven/repository</localRepository>
</settings>
EOF

    pushd /java/spring/spring-openapi ; ./mvnw clean install ; popd

        ....
        ....


    pushd /java/spring/spring-webapp  ; ./mvnw clean spring-boot:run ; popd

        ....
        ....


# -----------------------------------------------------
# -----------------------------------------------------
# Check the examples all work.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        spring-builder \
            bash

        ....
        ....


