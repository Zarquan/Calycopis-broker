#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Notes on the IVOA standard.

    Result:

    TODO

        Data discovery
        .... linked to executable inputs


# -----------------------------------------------------

Implementation

        Decide on path
            /executions/{uuid}
            /session/{uuid}

        Add execution status
            GET /executions/{uuid}

        Add ACCEPT update
            POST /executions/{uuid}

        Delete old code
            ambleck

        Update the package name
            metagrid.co.uk => ivoa.net

        Delete Python branch

        Add support for volumes and interlinks with data resources


# -----------------------------------------------------

Document

    1   Introduction

        1.1 Role within the IVOA
        1.2 Executable things

    2   Service interaction

        2.1 Discovery services

            2.1.1 Software discovery
            2.1.2 Data discovery - TODO

            2.2 Execution Broker
            2.2.1 Offerset request
            2.2.2 Offerset response

            2.2.3 Update options

        2.3 Session lifecycle
            TODO more on the timing and scheduling

    3   Data model

        3.1 Data curation roles

            3.1.1 The developer
            3.1.2 The packager
            3.1.3 The publisher
            3.1.4 The user

        TODO summary - combination of contributions from the roles
        forms the request sent to the broker

        3.2 The executable

            3.2.1 Jupyter notebook
            3.2.2 Docker container
            TODO 3.2.3 Singularity container ?
            TODO move comment on pattern to before Jupyter

        3.3 Resources

            3.3.1 Compute resources
            TODO simplify the section on gpus and urls

            3.3.2 Storage resources
                Ephemeral storage
                Persistent storage
                    Unmanaged persistent storage
                    Managed persistent storage


        3.4 Date and time
        TODO rename to schedule

            TODO reason for the start interval range - user specifies, or constrains the range
            TODO resson for the max duration - if the user jnows they have 10,000 files to process, they don't want extra time allocated to the individual offers.
            TODO separate the requested and offered, server does not have to include the requested values
            TODO requested start times are an array, offered start time is a single interval

        4 federated architecture

            TODO The ExecutionBroker service **interface** is designed to be used at multiple levels ...
            TODO Remove ExecutionWorker reference.

            TODO 4.1 aggregator service
            TODO Add diagram of aggregator
            TODO doesn not need to pass though all of the offers
                take the best 2 from each site ..
                agent service - select just one best offer
                ** still needs the client to say 'yes'

            TODO 4.2 gateway service
            TODO Add diagram of gateway

            TODO 4.3 Simple load balancing
            TODO Simple load balancing based on data location.

        5 Example use cases

            5.1 Simple use cases
                TODO all of them need details

            5.2 Complex use cases
                TODO develop from talking to colleagues
                5.2.1 ...
                5.2.2 M87 multi-wavelength comparison
                5.2.3 Science pipeline using Docker
                5.2.4 DASK cluster
                5.2.5 GPU based analysis

        6 Service specification

            6.1 Transport protocols
                6.1.1 HTTP transport
                    reference to standard doc on HTTP

            6.2 Serialization methods
                6.2.1 JSON serialization
                    reference to standard doc on JSON
                6.2.2 YAML serialization
                6.2.3 XML serialization

            6.3 IVOA integration
                6.3.1 VOSI endpoint
                    Reference to standard doc on VOSI

            6.4 Error messages
                Reference to standard doc on errors
                6.4.1 general error codes
                6.4.2 specific error codes
















