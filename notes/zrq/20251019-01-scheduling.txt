#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Refactor the scheduling

    Result:

        Work in progress ...

# -----------------------------------------------------


    The context has maps to resolve references within a request.

        AbstractExecutableValidator.Result session.getExecutableResult()

        List<AbstractComputeResourceValidator.Result> session.getComputeValidatorResults()

        List<AbstractStorageResourceValidator.Result> session.getStorageValidatorResults()

        List<AbstractDataResourceValidator.Result> session.getDataResourceValidatorResults()

    We also need to link data and storage.

        To calculate the prep time, we need to list data resources in each storage resource.
        We need the max of the total prep time for each storage resource

        Storage.Result.getTotalPrepTime()
            Long maxDataPrepTime
            foreach List<Data.Result> storage.getDataReferences()
                Long dataPrepTime = dataResult.getTotalPrepTime()
                if dataPrepTime > maxDataPrepTime
                    maxDataPrepTime = dataPrepTime
            return maxDataPrepTime + this.prepTime ;

        Data.Result.getTotalPrepTime()
            return this.prepTime ;


        Long maxStoragePrepTime
        foreach Storage.Result
            Long storagePrepTime = storage.getTotalPrepTime()
            if storagePrepTime > maxStoragePrepTime
                maxStoragePrepTime = storagePrepTime



# -----------------------------------------------------


