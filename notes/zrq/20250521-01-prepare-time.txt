#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Propagate the preparation time for data and storage resources to the session start
        https://github.com/ivoa/Calycopis-broker/issues/235

        Define the relationship between data resource and storage resource
        https://github.com/ivoa/Calycopis-broker/issues/211

        We need to add references from data to storage and storage to data.
        OneToMany
            storage has many data


        Data and storage have prepare and start times.

            data.start:
                session.start - data prepare
            storage.start:
                session.start - (max(data.prepare) + storage.prepare)

        Data and storage have sizes.

            data.size:
                from SKAO metadata
            storage.size:
                sum(data.size)




    Result:

        Work in progress ...

# -----------------------------------------------------

    Validate the storage resources.

    Validate the data resources.
        Check for corresponding storage resource.
        Add a reference (by name).


# -----------------------------------------------------
# Create a new branch.
#[user@desktop]

    branchname=prepare-time

    source "${HOME:?}/calycopis.env"
    pushd "${CALYCOPIS_CODE}"

        newbranch=$(date '+%Y%m%d')-zrq-${branchname:?}

        git checkout main

        git checkout -b "${newbranch:?}"

    popd


# -----------------------------------------------------
# Build the project.
#[user@desktop]

    source "${HOME:?}/calycopis.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --publish 8082:8082 \
        --name spring-builder \
        --volume "${HOME}/.m2/repository:/maven/repository:rw,z" \
        --volume "${CALYCOPIS_CODE}/java:/java:rw,z" \
        --volume "${CALYCOPIS_CODE}/openapi:/openapi:rw,z" \
        --volume "${CALYCOPIS_CODE}/examples:/examples:rw,z" \
        ghcr.io/ivoa/calycopis/java-builder:2024.08.30 \
        bash

    #
    # Add a reference to the Maven repository on the host.
    # Only need this if we want the internal Maven build to share the same repo as the host.
    mkdir ${HOME}/.m2
    cat > ${HOME}/.m2/settings.xml << EOF
<settings>
    <localRepository>/maven/repository</localRepository>
</settings>
EOF

    pushd /java/spring/spring-openapi ; ./mvnw clean install ; popd

        ....
        ....


    pushd /java/spring/spring-webapp  ; ./mvnw clean spring-boot:run ; popd

        ....
        ....


# -----------------------------------------------------
# -----------------------------------------------------
# Launch second terminal ...
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        spring-builder \
            bash

        ....
        ....


# -----------------------------------------------------
# Create some examples to work with.
#[root@spring-builder]

    examplename=012
    examplepath=/examples/${examplename}
    examplefull=${examplepath}/${examplename}
    rm -rf "${examplepath}"
    mkdir  "${examplepath}"

    #
    # Replica at AUSRC_STORM has zero transfer time.
    # Replica at JPSRC_STORM has 2s/GB transfer rate.
    # Replica at SPSRC_STORM has 4s/GB transfer rate.
    # Default service delay is 60s.
    # Data size 1KB.
    #

    cat > "${examplefull}-001-offerset-request.yaml" << EOF
name: example-${examplename}
executable:
  name: executable-${examplename}
  type: https://www.purl.org/ivoa.net/EB/schema/types/executables/docker-container-1.0
  image:
    locations:
      - "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13"
    digest: sha256:5d22a47f43b2b5efc433554092de724bd6c3cf01d2c74038f6569770a5dd5245
resources:
  data:
    - name: data-${examplename}-01
      type: https://www.purl.org/ivoa.net/EB/schema/types/resources/data/skao-data-resource-1.0
      skao:
        namespace:  "testing"
        objectname: "zrq-test-20250509-082506"
        datasize:   1024
        replicas:
          - rsename: "SPSRC_STORM"
          - rsename: "JPSRC_STORM"
          - rsename: "AUSRC_STORM"
EOF

    curl \
        --silent \
        --show-error \
        --header 'Content-Type: application/yaml' \
        --data-binary "@${examplefull}-001-offerset-request.yaml" \
        --header 'Accept: application/yaml' \
        'http://127.0.0.1:8082/offersets' \
    | yq '.' \
    | tee "${examplefull}-002-offerset-response.yaml" \
    | yq '
        .offers[] | [
                {
                "session": {
                    "name": .name,
                    "created": .created,
                    "schedule": .schedule
                    },
                "data": [
                    .resources.data[].schedule
                    ]
                }
            ]
        '

--START--
....
....
--END--

