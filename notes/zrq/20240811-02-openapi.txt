#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Create a new OpenAPI specification, with shallower inheritance.

    Result:

        Work in progress ...

# -----------------------------------------------------
# Create a new branch
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    pushd "${CALYCOPIS_CODE}"

        branchname=openapi-0.8
        newbranch=$(date '+%Y%m%d')-zrq-${branchname:?}

        git checkout main

        git checkout -b "${newbranch:?}"

        git push --set-upstream 'origin' "$(git branch --show-current)"


# -----------------------------------------------------
# Create our new OpenAPI specification.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    pushd "${CALYCOPIS_CODE}"

        pushd openapi/ivoa

            cp openapi-0.7.yaml openapi-0.8.yaml

            gedit openapi-0.8.yaml &

                ....
                ....


# -----------------------------------------------------
# Launch a container to generate the Java Spring classes.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    pushd "${CALYCOPIS_CODE}"

        pushd openapi

            podman run \
                --rm \
                --tty \
                --interactive \
                --name spring-builder \
                --volume "$(pwd)/ivoa:/ivoa:ro,z" \
                --volume "$(pwd)/impl/java/spring:/spring:rw,z" \
                fedora \
                bash

    >   ....
    >   ....


# -----------------------------------------------------
# Install the Java development kit.
#[root@spring-builder]

    dnf install -y \
        which \
        java-latest-openjdk-devel

    cat >>  "${HOME}/.bashrc" << 'EOF'
export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:/bin/java::")
EOF

    source "${HOME}/.bashrc"

    echo "JAVA_HOME [${JAVA_HOME}]"

    >   ....
    >   ....


# -----------------------------------------------------
# Generate the Java classes from the OpenAPI spec.
#[root@spring-builder]

    pushd /spring/spring-openapi

        ./mvnw clean install

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Compile and run our webapp classes.
#[root@spring-builder]

    pushd /spring/spring-webapp

        ./mvnw clean spring-boot:run

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Short forms.
#[root@spring-builder]

    pushd /spring/spring-openapi ; ./mvnw clean install ; popd

    pushd /spring/spring-webapp ; ./mvnw clean spring-boot:run ; popd

    >   ....
    >   ....


# -----------------------------------------------------
# -----------------------------------------------------
# Test our webapp in a second terminal.
#[user@desktop]

    podman exec \
        --tty \
        --interactive \
        spring-builder \
        bash

    >   ....
    >   ....


# -----------------------------------------------------
# Install the client tools.
#[root@spring-builder]

    dnf install -y \
        xmlstarlet \
        curl \
        jq \
        yq


# -----------------------------------------------------
# Test our webapp.
#[root@spring-builder]

cat > /tmp/test-001.yaml  << EOF
schedule:
  - start: 2024-07-08T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-09T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-10T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
executable:
  properties:
  name: My test executable
  type: urn:docker-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
  network:
    ports:
      - internal: 3000
        protocol: TCP
resources:
  compute:
    - properties:
      name: My test compute resource
      type: urn:simple-compute-resource
      cores:
        min: 2
        max: 5
      memory:
        min: 20
        max: 50
  storage:
    - properties:
      name: My test storage resource
      type: urn:simple-storage-resource
      size:
        min: 200
        max: 500
        units: none
  data:
    - properties:
      name: My test data resource
      type: urn:simple-data-resource
      location: http://data.example.org/downloads/hdf5t8
EOF



    # Request a new offerset, debug ON.
    curl \
        --verbose \
        --location \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/offerset"

    >   * processing: http://127.0.0.1:8082/offerset
    >   *   Trying 127.0.0.1:8082...
    >   * Connected to 127.0.0.1 (127.0.0.1) port 8082
    >   > POST /offerset HTTP/1.1
    >   > Host: 127.0.0.1:8082
    >   > User-Agent: curl/8.2.1
    >   > Content-Type: application/yaml
    >   > Accept: application/yaml
    >   > Content-Length: 986
    >   >
    >   < HTTP/1.1 303
    >   * Please rewind output before next send
    >   < Location: http://127.0.0.1:8082/offerset/02a63caf-5846-11ef-8aef-9f6875c8f7d4
    >   < Content-Type: application/yaml
    >   < Transfer-Encoding: chunked
    >   < Date: Mon, 12 Aug 2024 00:58:38 GMT
    >   <
    >   * Ignoring the response-body
    >   * Connection #0 to host 127.0.0.1 left intact
    >   * Issue another request to this URL: 'http://127.0.0.1:8082/offerset/02a63caf-5846-11ef-8aef-9f6875c8f7d4'
    >   * Switch to GET
    >   * Found bundle for host: 0x55f09b740aa0 [serially]
    >   * Can not multiplex, even if we wanted to
    >   * Re-using existing connection with host 127.0.0.1
    >   > GET /offerset/02a63caf-5846-11ef-8aef-9f6875c8f7d4 HTTP/1.1
    >   > Host: 127.0.0.1:8082
    >   > User-Agent: curl/8.2.1
    >   > Content-Type: application/yaml
    >   > Accept: application/yaml
    >   >
    >   < HTTP/1.1 200
    >   < Content-Type: application/yaml
    >   < Transfer-Encoding: chunked
    >   < Date: Mon, 12 Aug 2024 00:58:38 GMT
    >   <
    >   uuid: "02a63caf-5846-11ef-8aef-9f6875c8f7d4"
    >   messages:
    >   - type: "https://example.org/message-types/debug"
    >     time: "2024-08-12T00:58:38.719054614Z"
    >     level: "DEBUG"
    >     template: "HttpServletRequest [${url}][${uri}][${context}][${servlet}]"
    >     values:
    >       servlet: "/offerset"
    >       context: ""
    >       uri: "/offerset"
    >       url: "http://127.0.0.1:8082/offerset"
    >     message: "[DEBUG] HttpServletRequest [http://127.0.0.1:8082/offerset][/offerset][][/offerset]"
    >   - type: "https://example.org/message-types/info"
    >     time: "2024-08-12T00:58:38.744028246Z"
    >     level: "INFO"
    >     template: "OfferSetResponseFactory [${uuid}]"
    >     values:
    >       uuid: "e23ecbde-5845-11ef-8aef-9f6875c8f7d4"
    >     message: "[INFO] OfferSetResponseFactory [e23ecbde-5845-11ef-8aef-9f6875c8f7d4]"
    >   result: "NO"
    >   href: "http://127.0.0.1:8082/offerset/02a63caf-5846-11ef-8aef-9f6875c8f7d4"
    >   expires: "2024-08-12T01:03:38.717300574Z"
    >   * Connection #0 to host 127.0.0.1 left intact


    # Request a new offerset
    curl \
        --silent \
        --show-error \
        --location \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/offerset" \
    | tee "/tmp/result-001.yaml" \
    | yq '.'

    >   uuid: "a4cc3f34-5846-11ef-8aef-9f6875c8f7d4"
    >   messages:
    >     - type: "https://example.org/message-types/debug"
    >       time: "2024-08-12T01:03:10.757794663Z"
    >       level: "DEBUG"
    >       template: "HttpServletRequest [${url}][${uri}][${context}][${servlet}]"
    >       values:
    >         servlet: "/offerset"
    >         context: ""
    >         uri: "/offerset"
    >         url: "http://127.0.0.1:8082/offerset"
    >       message: "[DEBUG] HttpServletRequest [http://127.0.0.1:8082/offerset][/offerset][][/offerset]"
    >     - type: "https://example.org/message-types/info"
    >       time: "2024-08-12T01:03:10.757951523Z"
    >       level: "INFO"
    >       template: "OfferSetResponseFactory [${uuid}]"
    >       values:
    >         uuid: "e23ecbde-5845-11ef-8aef-9f6875c8f7d4"
    >       message: "[INFO] OfferSetResponseFactory [e23ecbde-5845-11ef-8aef-9f6875c8f7d4]"
    >   result: "NO"
    >   href: "http://127.0.0.1:8082/offerset/a4cc3f34-5846-11ef-8aef-9f6875c8f7d4"
    >   expires: "2024-08-12T01:08:10.757572593Z"


    # Request the same offerset
    href=$(
        yq '.href' "/tmp/result-001.yaml"
        )

    curl \
        --silent \
        --show-error \
        --location \
        --header "Accept: application/yaml" \
        "${href}" \
    | yq '.'




cat > /tmp/test-002.yaml  << EOF
name: My execution request
executable:
  properties:
  name: My test executable
  type: urn:docker-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
  network:
    ports:
      - internal: 3000
        protocol: TCP
resources:
  compute:
    - properties:
      name: My compute resource
      type: urn:simple-compute-resource
      cores:
        min: 2
        max: 5
      memory:
        min: 20
        max: 50
  data:
    - properties:
      name: My data resource
      type: urn:simple-data-resource
      location: http://data.example.org/downloads/hdf5t8
EOF

    # Request a new offerset
    curl \
        --silent \
        --show-error \
        --location \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-002.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/offerset" \
    | tee "/tmp/result-002.yaml" \
    | yq '.'





