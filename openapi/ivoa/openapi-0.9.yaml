#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester University (http://www.manchester.ac.uk/)
#
#     This work is made available under the Creative Commons
#     Attribution-ShareAlike 4.0 International licence.
#
#     For details of the licence terms see:
#     https://creativecommons.org/licenses/by-sa/4.0/
#   </meta:licence>
# </meta:header>
#
# AIMetrics: [
#     {
#     "name": "ChatGPT",
#     "contribution": {
#       "value": 10,
#       "units": "%"
#       }
#     }
#   ]
#

openapi: 3.1.0
#openapi: 3.0.3
info:
  title: IVOA ExecutionBroker
  version: "0.8"
# summary: IVOA ExecutionBroker interface
  description: >
    IVOA ExecutionBroker interface
  contact:
    name: Zarquan
    url: https://github.com/Zarquan
# license:
#   name: Creative Commons Attribution Share Alike 4.0 International
#   identifier: CC-BY-SA-4.0
servers:
  - url: http://localhost:8080
    description: Localhost development
paths:
  /offerset:
    post:
      operationId: OfferSetPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferSetRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/OfferSetRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/OfferSetRequest'
        required: true
      # TODO Errors return error codes and ErrorResponse.
      responses:
        "303":
          description: Redirect
          headers:
            Location:
              content:
                text/plain:
                  schema:
                    type: string
        "200":
          description: R
          headers:
            Location:
              content:
                text/plain:
                  schema:
                    type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferSetResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/OfferSetResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/OfferSetResponse'

  /offerset/{uuid}:
    get:
      operationId: OfferSetGet
      parameters:
        - name: uuid
          in: path
          description: The offerset identifier
          required: true
          schema:
            type: string
            format: uuid
          style: simple
      # TODO Errors return error codes and ErrorResponse.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferSetResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/OfferSetResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/OfferSetResponse'

  /execution/{uuid}:
    get:
      operationId: ExecutionGet
      parameters:
        - name: uuid
          in: path
          description: The execution identifier
          required: true
          schema:
            type: string
            format: uuid
          style: simple
      # TODO Errors return error codes and ErrorResponse.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'

    post:
      operationId: ExecutionPost
      parameters:
        - name: uuid
          in: path
          description: The execution identifier
          required: true
          schema:
            type: string
            format: uuid
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      # TODO Errors return error codes and ErrorResponse.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'

  #
  # Update expired offers.
  /system/sweep/update:
    get:
      operationId: SweepUpdate
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  #
  # Delete expired offers.
  /system/sweep/delete:
    get:
      operationId: SweepDelete
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

  #
  # Advance the state of an executon.
  /system/step/{uuid}:
    get:
      operationId: StepUpdate
      parameters:
        - name: uuid
          in: path
          description: The execution identifier
          required: true
          schema:
            type: string
            format: uuid
          style: simple
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ExecutionSessionResponse'

components:
  schemas:

#   MinMaxInteger:
#     description: >
#       A minimum and maximum pair with units for an integer value.
#     type: object
#     properties:
#       min:
#         type: integer
#         format: int32
#       max:
#         type: integer
#         format: int32
#       units:
#         type: string

#   MinMaxFloat:
#     description: >
#       A minimum and maximum pair with units for a floating point value.
#     type: object
#     properties:
#       min:
#         type: number
#         format: float
#       max:
#         type: number
#         format: float
#       units:
#         type: string

#   MinMaxString:
#     description: >
#       A minimum and maximum pair with units for a string point value.
#     type: object
#     properties:
#       min:
#         type: string
#       max:
#         type: string
#       units:
#         type: string

    NameValueMap:
      description: >
        A map of name->value properties.
        See https://swagger.io/docs/specification/data-models/dictionaries/
      type: object
      additionalProperties:
        type: string

    MessageItem:
      description: >
        A log message based on the Message Templates standard.
        https://messagetemplates.org/
      type: object
      xml:
        name: message
      properties:
        type:
          description: >
            The message type identifier.
            Typically a URL pointing to a human readable description of the message.
          type: string
        time:
          description: >
            The date and time of the message.
          type: string
          format: date-time
        level:
          description: >
            The message level.
          type: string
          enum:
            - "DEBUG"
            - "WARN"
            - "ERROR"
            - "INFO"
            - "OTHER"
        template:
          description: >
            The message template.
          type: string
        values:
          description: >
            A map of name->value properties.
          xml:
            name: values
          $ref: '#/components/schemas/NameValueMap'
        message:
          description: >
            The resulting message.
          type: string

    MessageList:
      description: >
        A list of log messages.
      xml:
        name: messages
      type: array
      items:
        $ref: '#/components/schemas/MessageItem'
        xml:
          name: message

    AbstractComponent:
      description: >
        Abstract base class for all our components.
        This class provides a name, a UUID identifier,
        and a map of name->value properties.
      type: object
      properties:
        uuid:
          description: >
            A machine readable UUID, assigned by the server.
          type: string
          format: uuid
        href:
          description: >
            The URL to access this component, assigned by the server.
          type: string
        name:
          description: >
            A human readable name, assigned by the client.
          type: string
        created:
          description: >
            The date and time that this component was created.
          type: string
          format: date-time
        messages:
          description: >
            A list of messages about this component.
          xml:
            name: messages
          type: array
          items:
            $ref: '#/components/schemas/MessageItem'
            xml:
              name: message

    AbstractComputeResource:
      description: >
        Abstract base class for compute resources.
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          "urn:simple-compute-resource-0.1": '#/components/schemas/SimpleComputeResource'
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          properties:
            type:
              type: string
              xml:
                attribute: true

    SimpleComputeResource:
      description: >
        A simple compute resource.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractComputeResource'
        - type: object
          properties:
            cores:
              $ref: '#/components/schemas/ComputeResourceCores'
            memory:
              $ref: '#/components/schemas/ComputeResourceMemory'
            volumes:
              description: >
                A list of resource volumes.
              type: array
              items:
                $ref: '#/components/schemas/ComputeResourceVolume'

    ComputeResourceSizeUnit:
      description: >
        A size unit for compute resources.
        Specified in multiples of 1000^n and 1024^n.
        https://github.com/metio/storage-units.java/
        https://en.wikipedia.org/wiki/Byte#Multiple-byte_units
      type: string
      pattern: '/^[0-9]+(kB|KiB|MB|MiB|GB|GiB|TB|TiB|PB|PiB)$/gm'

    ComputeResourceCores:
      description: >
        The number of CPU cores requested and offered.
      type: object
      properties:
        requested:
          description: >
            The number of cpu cores requested by the user.
          type: integer
        offered:
          description: >
            The number of cpu cores offered by the service.
          type: integer

    ComputeResourceMemory:
      description: >
        The amount memory requested and offered.
      type: object
      properties:
        requested:
          description: >
            The amount of memory requested by the user, default units are `GiB`.
          $ref: '#/components/schemas/ComputeResourceSizeUnit'

        offered:
          description: >
            The amount of memory offered by the service.
          $ref: '#/components/schemas/ComputeResourceSizeUnit'

    ComputeResourceVolume:
      description: >
        A class to represent a ComputeResource volume mount.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          properties:
            path:
              description: >
                The mount point in the target filesystem.
              type: string
            mode:
              description: >
                The read-write mode.
              type: string
              enum:
                - READONLY
                - READWRITE
            resource:
              description: >
                The name or UUID of the resource to mount.
              type: string

    AbstractStorageResource:
      description: >
        Abstract base class for storage resources.
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          "urn:simple-storage-resource-0.1": '#/components/schemas/SimpleStorageResource'
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          properties:
            type:
              type: string
              xml:
                attribute: true

    SimpleStorageResource:
      description: >
        A simple storage resource.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractStorageResource'
        - type: object
          properties:
            size:
              type: object
              properties:
                requested:
                  description: >
                    The size of the storage resource requested by the user, default units are `GiB`.
                  $ref: '#/components/schemas/ComputeResourceSizeUnit'
                offered:
                  description: >
                    The size of the storage resource offered by the service.
                  $ref: '#/components/schemas/ComputeResourceSizeUnit'

    AbstractDataResource:
      description: >
        Abstract base class for data resources.
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          "urn:simple-data-resource-0.1": '#/components/schemas/SimpleDataResource'
          "urn:Rucio-data-resource-0.1":  '#/components/schemas/RucioDataResource'
          "urn:S3-data-resource-0.1":     '#/components/schemas/S3DataResource'
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          properties:
            type:
              type: string
              xml:
                attribute: true

    SimpleDataResource:
      description: >
          A simple downloadable data resource.
          This type of resource should always be mounted read-only.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataResource'
        - type: object
          properties:
            location:
              description: |
                The URL of the data to import.
              type: string

    S3DataResource:
      description: A S3 data resource.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataResource'
        - type: object
          properties:
            endpoint:
              description: |
                The endpoint address of the S3 service.
              type: string
            template:
              description: |
                The URL template for the S3 service.
              type: string
            bucket:
              description: |
                The target bucket name.
              type: string
            object:
              description: |
                The target object name.
                Leaving this blank will mount the whole bucket as a directory.
              type: string

    RucioDataResource:
      description: A Rucio data resource.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataResource'
        - type: object
          properties:
            endpoint:
              description: |
                The endpoint address of the Rucio service.
              type: string
            domain:
              description: |
                The domain name.
              type: string
            object:
              description: |
                The target object name.
              type: string

    AbstractExecutable:
      description: Abstract base class for executables.
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          "urn:docker-container-0.1":   '#/components/schemas/DockerContainer'
          "urn:singular-container-0.1": '#/components/schemas/SingularContainer'
          "urn:repo2docker-0.1":        '#/components/schemas/Repo2DockerContainer'
          "urn:jupyter-notebook-0.1":   '#/components/schemas/JupyterNotebook'
          "urn:binder-notebook-0.1":    '#/components/schemas/BinderNotebook'
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          properties:
            type:
              type: string
              xml:
                attribute: true

    DockerContainer:
      description: |
        A Docker or OCI container executable.
        See https://opencontainers.org/
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractExecutable'
        - type: object
          properties:
            image:
              type: string
              description: >
                The image name, with or without the repository, namespace or tag.
            namespace:
              type: string
              description: >
                The namespace within the repository, if not already specified in the image name.
            tag:
              type: string
              description: The image tag, if not already specified in the image name.
            repository:
              type: string
              description: The respository tag, if not already specified in the image name.
            platform:
              type: string
              description: >
                The target CPU architecture the container is built for.
                The default is `linux/amd64`.
            privileged:
              type: boolean
              default: false
              description: >
                Set the privileged flag on execution.
                The default is `false`.
                See https://docs.docker.com/reference/cli/docker/container/run/#privileged.
            entrypoint:
              type: string
              description: Overwrite the default ENTRYPOINT of the image.
            environment:
              description: A name=>value map of environment variables to pass to the container.
              $ref: '#/components/schemas/NameValueMap'
            network:
              description: Details of the network access available to the container.
              $ref: '#/components/schemas/DockerNetworkSpec'

    DockerNetworkSpec:
      description: |
        Details of the network access available to the container.
      type: object
      properties:
        ports:
          description: >
            An array of network ports to publish.
          type: array
          items:
            $ref: '#/components/schemas/DockerNetworkPort'

    DockerNetworkPort:
      description: |
        Details of a network port on the container made available for connection from outside.
      type: object
      properties:
        address:
          type: string
          description: >
            The IP address of the external network interface.
            The client should not set this value.
            The service will update this with a publicly accessible interface address when it sets up the execution.
        external:
          type: string
          description: >
            The host machine's external port number to connect.
            The client should not set this value.
            The service will update this with the corrent port number when it sets up the execution.
        internal:
          type: string
          description: The port number on the container to publish.
        protocol:
          type: string
          enum:
            - UDP
            - TCP
            - HTTP
            - HTTPS
          description: >
            The network protocol to use, default is `TCP`.
            The `HTTP` and `HTTPS` values further specify the Protocol to use on top of `TCP`.
            Specifying `HTTPS` may help to meet firewall restrictions at some sites.

    SingularContainer:
      description: >
        A Singularity container executable.
        See https://docs.sylabs.io/guides/latest/user-guide/
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractExecutable'
        - type: object
          properties:
            image:
              type: string
              description: >
                The URL to download the container image from.

    Repo2DockerContainer:
      description: >
        A Repo2Docker executable.
        See https://repo2docker.readthedocs.io/en/latest/
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractExecutable'
        - type: object
          properties:
            source:
              type: string
              description: >
                The URL of the source repository.

    JupyterNotebook:
      description: >
        A Jupyter notebook executable.
        See https://jupyter.org/
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractExecutable'
        - type: object
          properties:
            notebook:
              type: string
              description: >
                The URL of the notebook.
                TODO - This needs to take into account different ways of referring to a notebook.

    BinderNotebook:
      description: >
        A Binder notebook executable.
        See https://the-turing-way.netlify.app/communication/binder/zero-to-binder.html
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractExecutable'
        - type: object
          properties:
            repository:
              type: string
              description: >
                The URL of the repository to package.
            notebook:
              type: string
              description: >
                The relative path of the notebook within the repository.

    ComputeResourceList:
      description: >
        A list of compute resources.
      type: array
      xml:
        name: compute
      items:
        $ref: '#/components/schemas/AbstractComputeResource'

    StorageResourceList:
      description: >
        A list of storage resources.
      type: array
      xml:
        name: storage
      items:
        $ref: '#/components/schemas/AbstractStorageResource'

    DataResourceList:
      description: >
        A list of data resources.
      type: array
      xml:
        name: storage
      items:
        $ref: '#/components/schemas/AbstractDataResource'

    AbstractOption:
      description: >
        Abstract base class for describing options.
        This includes the `type` discriminator and the target `path` to update.
      type: object
      required:
        - type
        - path
      discriminator:
        propertyName: type
        mapping:
          "urn:string-value-option":  '#/components/schemas/StringValueOption'
          "urn:enum-value-option":    '#/components/schemas/EnumValueOption'
          "urn:integer-value-option": '#/components/schemas/IntegerValueOption'
          "urn:integer-delta-option": '#/components/schemas/IntegerDeltaOption'
      properties:
        type:
          type: string
          xml:
            attribute: true
        path:
          description: >
            The target path that the option applies to.
          type: string
          xml:
            attribute: false

    StringValueOption:
      description: >
        A simple string value option.
        This option enables the client to set a string value pointed to by the path.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractOption'
        - type: object
          properties:
            pattern:
              description: >
                A regular expression pattern restricting the value.
              type: string

    EnumValueOption:
      description: >
        A simple enum value option.
        This option enables the client to set an enum value pointed to by the path.
      type: object
      required:
        - values
      allOf:
        - $ref: '#/components/schemas/AbstractOption'
        - type: object
          properties:
            values:
              description: >
                The list of allowed values to use.
              type: array
              items:
                type: string

    IntegerValueOption:
      description: >
        A simple integer value option.
        This option enables the client to set an integer value pointed to by the path.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractOption'
        - type: object
          properties:
            min:
              description: >
                The minimum value that can be set.
              type: integer
              format: int32
            max:
              description: >
                The maximum value that can be set.
              type: integer
              format: int32
            units:
              description: >
                The units used for the maximum and minimum values
                and the default units used for the update.
                The client may specify different units in the
                update if they need to.
              type: string

    IntegerDeltaOption:
      description: >
        A simple integer delta option.
        This option enables the client to increment or decrement an integer value pointed to by the path.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractOption'
        - type: object
          properties:
            min:
              description: >
                The minimum change that can be applied.
              type: integer
              format: int32
            max:
              description: >
                The maximum change that can be applied.
              type: integer
              format: int32
            units:
              description: >
                The units used for the maximum and minimum values
                and the default units used for the update.
                The client may specify different units in the
                update if they need to.
              type: string

    AbstractUpdate:
      description: >
        Abstract base class for updates.
        This includes the `type` discriminator and the target `path` to update.
      type: object
      required:
        - type
        - path
      discriminator:
        propertyName: type
        mapping:
          "urn:string-value-update":  '#/components/schemas/StringValueUpdate'
          "urn:enum-value-update":    '#/components/schemas/EnumValueUpdate'
          "urn:integer-value-update": '#/components/schemas/IntegerValueUpdate'
          "urn:integer-delta-update": '#/components/schemas/IntegerDeltaUpdate'
      properties:
        type:
          type: string
          xml:
            attribute: true
        path:
          description: >
            The target path that the update applies to.
          type: string
          xml:
            attribute: false

    StringValueUpdate:
      description: >
        A simple string value update.
      type: object
      required:
        - value
      allOf:
        - $ref: '#/components/schemas/AbstractUpdate'
        - type: object
          properties:
            value:
              description: >
                The string value to use.
              type: string

    EnumValueUpdate:
      description: >
        A simple enum value update.
      type: object
      required:
        - value
      allOf:
        - $ref: '#/components/schemas/AbstractUpdate'
        - type: object
          properties:
            value:
              description: >
                The enum value to use.
              type: string

    IntegerValueUpdate:
      description: >
        A simple integer value update.
      type: object
      required:
        - value
      allOf:
        - $ref: '#/components/schemas/AbstractUpdate'
        - type: object
          properties:
            value:
              description: >
                The integer value to use.
              type: integer
              format: int32
            units:
              description: >
                The units to use for the value.
              type: string

    IntegerDeltaUpdate:
      description: >
        A simple integer delta update.
        This increments or decrements the target value by the specified amount.
      type: object
      required:
        - delta
      allOf:
        - $ref: '#/components/schemas/AbstractUpdate'
        - type: object
          properties:
            delta:
              description: >
                The increment or decrement to apply.
              type: integer
              format: int32
            units:
              description: >
                The units to use for the change.
              type: string

    MinMaxDuration:
      description: >
        A duration time block describing how long the execution will take.
        The max and min values are expressed as ISO 8601 time durations.
        See https://en.wikipedia.org/wiki/ISO_8601#Durations
      type: object
      xml:
        name: duration
      properties:
        min:
          type: string
        max:
          type: string

#    ScheduleRequestItem:
#      description: >
#        A date and time request for an execution.
#      type: object
#      xml:
#        name: date-time
#      properties:
#        start:
#          description: >
#            The start time for the execution, expressed as an ISO 8601 time interval.
#            See : https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
#          type: string
#        duration:
#          description: >
#            The duration for the execution.
#          $ref: '#/components/schemas/MinMaxDuration'

#    ScheduleRequestList:
#      description: >
#        List of date and time request for an execution.
#      type: array
#      xml:
#        name: schedule
#        wrapped: true
#      items:
#        $ref: '#/components/schemas/ScheduleRequestItem'
#
    StringScheduleBlockValue:
      description: >
        Used for the predicted and observed times.
      type: object
      xml:
        name: date-time
      properties:
        start:
          type: string
        duration:
          type: string

    StringScheduleBlockItem:
      description: >
        Used for the predicted and observed times.
      type: object
      xml:
        name: date-time
      properties:
        preparing:
          $ref: '#/components/schemas/StringScheduleBlockValue'
        executing:
          $ref: '#/components/schemas/StringScheduleBlockValue'
        finishing:
          $ref: '#/components/schemas/StringScheduleBlockValue'

    StringScheduleBlock:
      description: >
        Schedule ...
      type: object
      xml:
        name: schedule
      properties:
        requested:
          $ref: '#/components/schemas/StringScheduleBlockItem'
        offered:
          $ref: '#/components/schemas/StringScheduleBlockItem'

    ISO8601Duration:
      description: >
        An ISO 8601 duration.
      type: string
      pattern: '^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$'

    ISO8601Interval:
      description: >
        An ISO 8601 interval.
      type: string
      pattern: '^(\d{4}(?:-\d{2}){2}T\d{2}(?::\d{2}){2}(?>[^\/]+))\/(P(?=.)(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?=.)(?:\d+H)?(?:\d+M)?(?:\d+S)?)?)$'

    ScheduleRequestBlock:
      description: >
        Details of when to execute the session.
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/ISO8601Duration'
        start:
          type: array
          items:
            $ref: '#/components/schemas/ISO8601Interval'

    ScheduleOfferItem:
      description: >
        Details of when the session will be executed.
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/ISO8601Duration'
        start:
          $ref: '#/components/schemas/ISO8601Interval'

    ScheduleOfferBlock:
      description: >
        Details of when the session will be executed.
      type: object
      properties:
        preparing:
          $ref: '#/components/schemas/ScheduleOfferItem'
        executing:
          $ref: '#/components/schemas/ScheduleOfferItem'
        finishing:
          $ref: '#/components/schemas/ScheduleOfferItem'

    ExecutionResourceList:
      description: >
        Combined compute and storage resource lists.
      type: object
      xml:
        name: resources
      properties:
        compute:
          $ref: '#/components/schemas/ComputeResourceList'
        storage:
          $ref: '#/components/schemas/StorageResourceList'
        data:
          $ref: '#/components/schemas/DataResourceList'

    ExecutionSessionStatus:
      description: >
        Status code for an execution session.
      type: string
      enum:
        - PROPOSED
        - OFFERED
        - ACCEPTED
        - REJECTED
        - EXPIRED
        - PREPARING
        - WAITING
        - RUNNING
        - FINISHING
        - COMPLETED
        - FAILED
        - CANCELLED

    ExecutionSessionRequest:
      description: >
        The base class for an execution. Used in both requests and responses.
      type: object
      xml:
        name: execution
      properties:
        name:
          description: >
            A human readable name.
          type: string
        executable:
          xml:
            name: executable
          # TODO Replace with AbstractExecutableRequest.
          $ref: '#/components/schemas/AbstractExecutable'
        resources:
          xml:
            name: resources
          # TODO Replace with SessionRequestResourceList.
          $ref: '#/components/schemas/ExecutionResourceList'
        schedule:
          xml:
            name: schedule
          type: object
          properties:
            requested:
              xml:
                name: requested
              $ref: '#/components/schemas/ScheduleRequestBlock'

    ExecutionSessionResponse:
      description: >
        An Execution session, including uuid, href, and status.
      type: object
      xml:
        name: execution
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          required:
            - uuid
            - state
            - href
          properties:
            offerset:
              description: >
                A reference to the parent OfferSet.
              xml:
                name: offerset
              $ref: '#/components/schemas/OfferSetLink'
            state:
              $ref: '#/components/schemas/ExecutionSessionStatus'
            expires:
              description: >
                The date and time that this execution offer expires.
                Only valid while the state is OFFERED.
              xml:
                name: expires
              type: string
              format: date-time
            executable:
              xml:
                name: executable
              $ref: '#/components/schemas/AbstractExecutable'
            resources:
              xml:
                name: resources
              $ref: '#/components/schemas/ExecutionResourceList'
            schedule:
              xml:
                name: schedule
              type: object
              properties:
                requested:
                  xml:
                    name: requested
                  $ref: '#/components/schemas/ScheduleRequestBlock'
                preparing:
                  xml:
                    name: preparing
                  $ref: '#/components/schemas/ScheduleOfferItem'
                executing:
                  xml:
                    name: executing
                  $ref: '#/components/schemas/ScheduleOfferItem'
                finishing:
                  xml:
                    name: finishing
                  $ref: '#/components/schemas/ScheduleOfferItem'
            options:
              description: >
                A List of options the client can apply to this Execution.
              type: array
              items:
                $ref: '#/components/schemas/AbstractOption'

    OfferSetLink:
      description: >
        A reference from an offer to it's parent offerset.
      type: object
      properties:
        uuid:
          description: >
            The UUID identifier of the parent OfferSet.
          type: string
          format: uuid
        href:
          description: >
            The URL of the parent OfferSet.
          type: string

    OfferSetRequest:
      description: >
        A request for a set of offers for an execution.
      type: object
      xml:
        name: offers-request
      allOf:
        - $ref: '#/components/schemas/ExecutionSessionRequest'

    OfferSetResponse:
      description: >
        A set of executions offered in response to a request,
        including a uuid, href, and an expiry date for the set.
      type: object
      required:
        - uuid
        - href
        - expires
      xml:
        name: offers-response
      allOf:
        - $ref: '#/components/schemas/AbstractComponent'
        - type: object
          properties:
            result:
              description: >
                A flag to indicate whether the request can be handled by this service.
                If service is able to handle the request, then the `result` will be `YES`
                and the `offers` block should contain one or more offers.
                If service is not able to handle the request, the `result` will be `NO`
                and the `messages` block should contain one or more reasons explaining why.
              type: string
              enum:
                - "YES"
                - "NO"
            expires:
              description: >
                The date and time that this set of offers expire.
              xml:
                name: expires
              type: string
              format: date-time
            # TODO Add simplified state OFFERED, ACCEPTED, REJECTED, EXPIRED, ..
            offers:
              type: array
              xml:
                name: offers
                wrapped: true
              items:
                $ref: '#/components/schemas/ExecutionSessionResponse'
                xml:
                  name: execution

    # TODO This should be is-a AbstractUpdate rather than has-a AbstractUpdate
    UpdateRequest:
      description: >
        A request to update an execution.
      type: object
      xml:
        name: update-request
      properties:
        update:
          xml:
            name: update
          $ref: '#/components/schemas/AbstractUpdate'



