# coding: utf-8

"""
    IVOA ExecutionBroker

    Prototype implementation of the IVOA ExecutionBroker interface 

    The version of the OpenAPI document: 0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DockerNetworkPort(BaseModel):
    """
    DockerNetworkPort
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="The IP address of the external network interface. The client should not set this value. The service will update this with the corrent public interface address when it sets up the execution. ")
    external: Optional[StrictStr] = Field(default=None, description="The host machine's external port number to connect. The client should not set this value. The service will update this with the corrent port number when it sets up the execution. ")
    internal: StrictStr = Field(description="The port number on the container to publish.")
    protocol: Optional[StrictStr] = Field(default=None, description="The network protocol to use, default is `TCP`. The `HTTP` and `HTTPS` values further specify the Protocol to use on top of `TCP`. Specifying `HTTPS` may help to meet firewall restrictions at some sites. ")
    __properties: ClassVar[List[str]] = ["address", "external", "internal", "protocol"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UDP', 'TCP', 'HTTP', 'HTTPS'):
            raise ValueError("must be one of enum values ('UDP', 'TCP', 'HTTP', 'HTTPS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DockerNetworkPort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DockerNetworkPort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "external": obj.get("external"),
            "internal": obj.get("internal"),
            "protocol": obj.get("protocol")
        })
        return _obj


