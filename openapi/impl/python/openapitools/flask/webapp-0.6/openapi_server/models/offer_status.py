from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class OfferStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, expires=None):  # noqa: E501
        """OfferStatus - a model defined in OpenAPI

        :param status: The status of this OfferStatus.  # noqa: E501
        :type status: str
        :param expires: The expires of this OfferStatus.  # noqa: E501
        :type expires: datetime
        """
        self.openapi_types = {
            'status': str,
            'expires': datetime
        }

        self.attribute_map = {
            'status': 'status',
            'expires': 'expires'
        }

        self._status = status
        self._expires = expires

    @classmethod
    def from_dict(cls, dikt) -> 'OfferStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OfferStatus of this OfferStatus.  # noqa: E501
        :rtype: OfferStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this OfferStatus.

        Setting the status of an offer to `REJECTED` will reject the offer. Setting the status of an offer to `ACCEPTED` will start the execution process and the status of any sibling offers will automatically be set to `REJECTED`.   # noqa: E501

        :return: The status of this OfferStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this OfferStatus.

        Setting the status of an offer to `REJECTED` will reject the offer. Setting the status of an offer to `ACCEPTED` will start the execution process and the status of any sibling offers will automatically be set to `REJECTED`.   # noqa: E501

        :param status: The status of this OfferStatus.
        :type status: str
        """
        allowed_values = ["OFFERED", "ACCEPTED", "REJECTED", "EXPIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def expires(self) -> datetime:
        """Gets the expires of this OfferStatus.

        The date and time that this offer expires.   # noqa: E501

        :return: The expires of this OfferStatus.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires: datetime):
        """Sets the expires of this OfferStatus.

        The date and time that this offer expires.   # noqa: E501

        :param expires: The expires of this OfferStatus.
        :type expires: datetime
        """

        self._expires = expires
