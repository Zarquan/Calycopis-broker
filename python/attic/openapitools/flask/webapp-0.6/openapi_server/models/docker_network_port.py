from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DockerNetworkPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, external=None, internal=None, protocol=None):  # noqa: E501
        """DockerNetworkPort - a model defined in OpenAPI

        :param address: The address of this DockerNetworkPort.  # noqa: E501
        :type address: str
        :param external: The external of this DockerNetworkPort.  # noqa: E501
        :type external: str
        :param internal: The internal of this DockerNetworkPort.  # noqa: E501
        :type internal: str
        :param protocol: The protocol of this DockerNetworkPort.  # noqa: E501
        :type protocol: str
        """
        self.openapi_types = {
            'address': str,
            'external': str,
            'internal': str,
            'protocol': str
        }

        self.attribute_map = {
            'address': 'address',
            'external': 'external',
            'internal': 'internal',
            'protocol': 'protocol'
        }

        self._address = address
        self._external = external
        self._internal = internal
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'DockerNetworkPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerNetworkPort of this DockerNetworkPort.  # noqa: E501
        :rtype: DockerNetworkPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this DockerNetworkPort.

        The IP address of the external network interface. The client should not set this value. The service will update this with the corrent public interface address when it sets up the execution.   # noqa: E501

        :return: The address of this DockerNetworkPort.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this DockerNetworkPort.

        The IP address of the external network interface. The client should not set this value. The service will update this with the corrent public interface address when it sets up the execution.   # noqa: E501

        :param address: The address of this DockerNetworkPort.
        :type address: str
        """

        self._address = address

    @property
    def external(self) -> str:
        """Gets the external of this DockerNetworkPort.

        The host machine's external port number to connect. The client should not set this value. The service will update this with the corrent port number when it sets up the execution.   # noqa: E501

        :return: The external of this DockerNetworkPort.
        :rtype: str
        """
        return self._external

    @external.setter
    def external(self, external: str):
        """Sets the external of this DockerNetworkPort.

        The host machine's external port number to connect. The client should not set this value. The service will update this with the corrent port number when it sets up the execution.   # noqa: E501

        :param external: The external of this DockerNetworkPort.
        :type external: str
        """

        self._external = external

    @property
    def internal(self) -> str:
        """Gets the internal of this DockerNetworkPort.

        The port number on the container to publish.  # noqa: E501

        :return: The internal of this DockerNetworkPort.
        :rtype: str
        """
        return self._internal

    @internal.setter
    def internal(self, internal: str):
        """Sets the internal of this DockerNetworkPort.

        The port number on the container to publish.  # noqa: E501

        :param internal: The internal of this DockerNetworkPort.
        :type internal: str
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")  # noqa: E501

        self._internal = internal

    @property
    def protocol(self) -> str:
        """Gets the protocol of this DockerNetworkPort.

        The network protocol to use, default is `TCP`. The `HTTP` and `HTTPS` values further specify the Protocol to use on top of `TCP`. Specifying `HTTPS` may help to meet firewall restrictions at some sites.   # noqa: E501

        :return: The protocol of this DockerNetworkPort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this DockerNetworkPort.

        The network protocol to use, default is `TCP`. The `HTTP` and `HTTPS` values further specify the Protocol to use on top of `TCP`. Specifying `HTTPS` may help to meet firewall restrictions at some sites.   # noqa: E501

        :param protocol: The protocol of this DockerNetworkPort.
        :type protocol: str
        """
        allowed_values = ["UDP", "TCP", "HTTP", "HTTPS"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol
