from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.abstract_executable import AbstractExecutable
from openapi_server.models.docker_network_spec import DockerNetworkSpec
from openapi_server import util

from openapi_server.models.abstract_executable import AbstractExecutable  # noqa: E501
from openapi_server.models.docker_network_spec import DockerNetworkSpec  # noqa: E501

class DockerContainer01(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ident=None, name=None, properties=None, type=None, image=None, namespace=None, tag=None, repository=None, platform=None, privileged=False, entrypoint=None, environment=None, network=None):  # noqa: E501
        """DockerContainer01 - a model defined in OpenAPI

        :param ident: The ident of this DockerContainer01.  # noqa: E501
        :type ident: str
        :param name: The name of this DockerContainer01.  # noqa: E501
        :type name: str
        :param properties: The properties of this DockerContainer01.  # noqa: E501
        :type properties: Dict[str, str]
        :param type: The type of this DockerContainer01.  # noqa: E501
        :type type: str
        :param image: The image of this DockerContainer01.  # noqa: E501
        :type image: str
        :param namespace: The namespace of this DockerContainer01.  # noqa: E501
        :type namespace: str
        :param tag: The tag of this DockerContainer01.  # noqa: E501
        :type tag: str
        :param repository: The repository of this DockerContainer01.  # noqa: E501
        :type repository: str
        :param platform: The platform of this DockerContainer01.  # noqa: E501
        :type platform: str
        :param privileged: The privileged of this DockerContainer01.  # noqa: E501
        :type privileged: bool
        :param entrypoint: The entrypoint of this DockerContainer01.  # noqa: E501
        :type entrypoint: str
        :param environment: The environment of this DockerContainer01.  # noqa: E501
        :type environment: Dict[str, str]
        :param network: The network of this DockerContainer01.  # noqa: E501
        :type network: DockerNetworkSpec
        """
        self.openapi_types = {
            'ident': str,
            'name': str,
            'properties': Dict[str, str],
            'type': str,
            'image': str,
            'namespace': str,
            'tag': str,
            'repository': str,
            'platform': str,
            'privileged': bool,
            'entrypoint': str,
            'environment': Dict[str, str],
            'network': DockerNetworkSpec
        }

        self.attribute_map = {
            'ident': 'ident',
            'name': 'name',
            'properties': 'properties',
            'type': 'type',
            'image': 'image',
            'namespace': 'namespace',
            'tag': 'tag',
            'repository': 'repository',
            'platform': 'platform',
            'privileged': 'privileged',
            'entrypoint': 'entrypoint',
            'environment': 'environment',
            'network': 'network'
        }

        self._ident = ident
        self._name = name
        self._properties = properties
        self._type = type
        self._image = image
        self._namespace = namespace
        self._tag = tag
        self._repository = repository
        self._platform = platform
        self._privileged = privileged
        self._entrypoint = entrypoint
        self._environment = environment
        self._network = network

    @classmethod
    def from_dict(cls, dikt) -> 'DockerContainer01':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerContainer01 of this DockerContainer01.  # noqa: E501
        :rtype: DockerContainer01
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ident(self) -> str:
        """Gets the ident of this DockerContainer01.


        :return: The ident of this DockerContainer01.
        :rtype: str
        """
        return self._ident

    @ident.setter
    def ident(self, ident: str):
        """Sets the ident of this DockerContainer01.


        :param ident: The ident of this DockerContainer01.
        :type ident: str
        """

        self._ident = ident

    @property
    def name(self) -> str:
        """Gets the name of this DockerContainer01.


        :return: The name of this DockerContainer01.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DockerContainer01.


        :param name: The name of this DockerContainer01.
        :type name: str
        """

        self._name = name

    @property
    def properties(self) -> Dict[str, str]:
        """Gets the properties of this DockerContainer01.

        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/   # noqa: E501

        :return: The properties of this DockerContainer01.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, str]):
        """Sets the properties of this DockerContainer01.

        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/   # noqa: E501

        :param properties: The properties of this DockerContainer01.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def type(self) -> str:
        """Gets the type of this DockerContainer01.


        :return: The type of this DockerContainer01.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DockerContainer01.


        :param type: The type of this DockerContainer01.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def image(self) -> str:
        """Gets the image of this DockerContainer01.

        The image name, with or without the repository, namespace or tag.   # noqa: E501

        :return: The image of this DockerContainer01.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this DockerContainer01.

        The image name, with or without the repository, namespace or tag.   # noqa: E501

        :param image: The image of this DockerContainer01.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def namespace(self) -> str:
        """Gets the namespace of this DockerContainer01.

        The namespace within the repository, if not already specified in the image name.   # noqa: E501

        :return: The namespace of this DockerContainer01.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace: str):
        """Sets the namespace of this DockerContainer01.

        The namespace within the repository, if not already specified in the image name.   # noqa: E501

        :param namespace: The namespace of this DockerContainer01.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def tag(self) -> str:
        """Gets the tag of this DockerContainer01.

        The image tag, if not already specified in the image name.  # noqa: E501

        :return: The tag of this DockerContainer01.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this DockerContainer01.

        The image tag, if not already specified in the image name.  # noqa: E501

        :param tag: The tag of this DockerContainer01.
        :type tag: str
        """

        self._tag = tag

    @property
    def repository(self) -> str:
        """Gets the repository of this DockerContainer01.

        The respository tag, if not already specified in the image name.  # noqa: E501

        :return: The repository of this DockerContainer01.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository: str):
        """Sets the repository of this DockerContainer01.

        The respository tag, if not already specified in the image name.  # noqa: E501

        :param repository: The repository of this DockerContainer01.
        :type repository: str
        """

        self._repository = repository

    @property
    def platform(self) -> str:
        """Gets the platform of this DockerContainer01.

        The target CPU architecture the container is built for. The default is `linux/amd64`.   # noqa: E501

        :return: The platform of this DockerContainer01.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this DockerContainer01.

        The target CPU architecture the container is built for. The default is `linux/amd64`.   # noqa: E501

        :param platform: The platform of this DockerContainer01.
        :type platform: str
        """

        self._platform = platform

    @property
    def privileged(self) -> bool:
        """Gets the privileged of this DockerContainer01.

        Set the privileged flag on execution. The default is `false`. See https://docs.docker.com/reference/cli/docker/container/run/#privileged.   # noqa: E501

        :return: The privileged of this DockerContainer01.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged: bool):
        """Sets the privileged of this DockerContainer01.

        Set the privileged flag on execution. The default is `false`. See https://docs.docker.com/reference/cli/docker/container/run/#privileged.   # noqa: E501

        :param privileged: The privileged of this DockerContainer01.
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def entrypoint(self) -> str:
        """Gets the entrypoint of this DockerContainer01.


        :return: The entrypoint of this DockerContainer01.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: str):
        """Sets the entrypoint of this DockerContainer01.


        :param entrypoint: The entrypoint of this DockerContainer01.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def environment(self) -> Dict[str, str]:
        """Gets the environment of this DockerContainer01.

        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/   # noqa: E501

        :return: The environment of this DockerContainer01.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment: Dict[str, str]):
        """Sets the environment of this DockerContainer01.

        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/   # noqa: E501

        :param environment: The environment of this DockerContainer01.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def network(self) -> DockerNetworkSpec:
        """Gets the network of this DockerContainer01.


        :return: The network of this DockerContainer01.
        :rtype: DockerNetworkSpec
        """
        return self._network

    @network.setter
    def network(self, network: DockerNetworkSpec):
        """Sets the network of this DockerContainer01.


        :param network: The network of this DockerContainer01.
        :type network: DockerNetworkSpec
        """

        self._network = network
