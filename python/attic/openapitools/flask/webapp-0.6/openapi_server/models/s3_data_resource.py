from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.abstract_data_resource import AbstractDataResource
from openapi_server import util

from openapi_server.models.abstract_data_resource import AbstractDataResource  # noqa: E501

class S3DataResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ident=None, name=None, properties=None, type=None, endpoint=None, template=None, bucket=None, object=None):  # noqa: E501
        """S3DataResource - a model defined in OpenAPI

        :param ident: The ident of this S3DataResource.  # noqa: E501
        :type ident: str
        :param name: The name of this S3DataResource.  # noqa: E501
        :type name: str
        :param properties: The properties of this S3DataResource.  # noqa: E501
        :type properties: Dict[str, str]
        :param type: The type of this S3DataResource.  # noqa: E501
        :type type: str
        :param endpoint: The endpoint of this S3DataResource.  # noqa: E501
        :type endpoint: str
        :param template: The template of this S3DataResource.  # noqa: E501
        :type template: str
        :param bucket: The bucket of this S3DataResource.  # noqa: E501
        :type bucket: str
        :param object: The object of this S3DataResource.  # noqa: E501
        :type object: str
        """
        self.openapi_types = {
            'ident': str,
            'name': str,
            'properties': Dict[str, str],
            'type': str,
            'endpoint': str,
            'template': str,
            'bucket': str,
            'object': str
        }

        self.attribute_map = {
            'ident': 'ident',
            'name': 'name',
            'properties': 'properties',
            'type': 'type',
            'endpoint': 'endpoint',
            'template': 'template',
            'bucket': 'bucket',
            'object': 'object'
        }

        self._ident = ident
        self._name = name
        self._properties = properties
        self._type = type
        self._endpoint = endpoint
        self._template = template
        self._bucket = bucket
        self._object = object

    @classmethod
    def from_dict(cls, dikt) -> 'S3DataResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The S3DataResource of this S3DataResource.  # noqa: E501
        :rtype: S3DataResource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ident(self) -> str:
        """Gets the ident of this S3DataResource.


        :return: The ident of this S3DataResource.
        :rtype: str
        """
        return self._ident

    @ident.setter
    def ident(self, ident: str):
        """Sets the ident of this S3DataResource.


        :param ident: The ident of this S3DataResource.
        :type ident: str
        """

        self._ident = ident

    @property
    def name(self) -> str:
        """Gets the name of this S3DataResource.


        :return: The name of this S3DataResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this S3DataResource.


        :param name: The name of this S3DataResource.
        :type name: str
        """

        self._name = name

    @property
    def properties(self) -> Dict[str, str]:
        """Gets the properties of this S3DataResource.

        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/   # noqa: E501

        :return: The properties of this S3DataResource.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, str]):
        """Sets the properties of this S3DataResource.

        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/   # noqa: E501

        :param properties: The properties of this S3DataResource.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def type(self) -> str:
        """Gets the type of this S3DataResource.


        :return: The type of this S3DataResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this S3DataResource.


        :param type: The type of this S3DataResource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def endpoint(self) -> str:
        """Gets the endpoint of this S3DataResource.

        The endpoint address of the S3 service.   # noqa: E501

        :return: The endpoint of this S3DataResource.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: str):
        """Sets the endpoint of this S3DataResource.

        The endpoint address of the S3 service.   # noqa: E501

        :param endpoint: The endpoint of this S3DataResource.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def template(self) -> str:
        """Gets the template of this S3DataResource.

        The URL template for the S3 service.   # noqa: E501

        :return: The template of this S3DataResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template: str):
        """Sets the template of this S3DataResource.

        The URL template for the S3 service.   # noqa: E501

        :param template: The template of this S3DataResource.
        :type template: str
        """

        self._template = template

    @property
    def bucket(self) -> str:
        """Gets the bucket of this S3DataResource.

        The target bucket name.   # noqa: E501

        :return: The bucket of this S3DataResource.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket: str):
        """Sets the bucket of this S3DataResource.

        The target bucket name.   # noqa: E501

        :param bucket: The bucket of this S3DataResource.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def object(self) -> str:
        """Gets the object of this S3DataResource.

        The target object name. Leaving this blank will mount the whole bucket as a directory.   # noqa: E501

        :return: The object of this S3DataResource.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this S3DataResource.

        The target object name. Leaving this blank will mount the whole bucket as a directory.   # noqa: E501

        :param object: The object of this S3DataResource.
        :type object: str
        """

        self._object = object
