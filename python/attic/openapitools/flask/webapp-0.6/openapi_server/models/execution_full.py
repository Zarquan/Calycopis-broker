from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.abstract_executable import AbstractExecutable
from openapi_server.models.execution_resource_list import ExecutionResourceList
from openapi_server.models.execution_schedule_item import ExecutionScheduleItem
from openapi_server.models.execution_status import ExecutionStatus
from openapi_server.models.offer_status import OfferStatus
from openapi_server import util

from openapi_server.models.abstract_executable import AbstractExecutable  # noqa: E501
from openapi_server.models.execution_resource_list import ExecutionResourceList  # noqa: E501
from openapi_server.models.execution_schedule_item import ExecutionScheduleItem  # noqa: E501
from openapi_server.models.execution_status import ExecutionStatus  # noqa: E501
from openapi_server.models.offer_status import OfferStatus  # noqa: E501

class ExecutionFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executable=None, resources=None, schedule=None, offer=None, execution=None):  # noqa: E501
        """ExecutionFull - a model defined in OpenAPI

        :param executable: The executable of this ExecutionFull.  # noqa: E501
        :type executable: AbstractExecutable
        :param resources: The resources of this ExecutionFull.  # noqa: E501
        :type resources: ExecutionResourceList
        :param schedule: The schedule of this ExecutionFull.  # noqa: E501
        :type schedule: List[ExecutionScheduleItem]
        :param offer: The offer of this ExecutionFull.  # noqa: E501
        :type offer: OfferStatus
        :param execution: The execution of this ExecutionFull.  # noqa: E501
        :type execution: ExecutionStatus
        """
        self.openapi_types = {
            'executable': AbstractExecutable,
            'resources': ExecutionResourceList,
            'schedule': List[ExecutionScheduleItem],
            'offer': OfferStatus,
            'execution': ExecutionStatus
        }

        self.attribute_map = {
            'executable': 'executable',
            'resources': 'resources',
            'schedule': 'schedule',
            'offer': 'offer',
            'execution': 'execution'
        }

        self._executable = executable
        self._resources = resources
        self._schedule = schedule
        self._offer = offer
        self._execution = execution

    @classmethod
    def from_dict(cls, dikt) -> 'ExecutionFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecutionFull of this ExecutionFull.  # noqa: E501
        :rtype: ExecutionFull
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executable(self) -> AbstractExecutable:
        """Gets the executable of this ExecutionFull.


        :return: The executable of this ExecutionFull.
        :rtype: AbstractExecutable
        """
        return self._executable

    @executable.setter
    def executable(self, executable: AbstractExecutable):
        """Sets the executable of this ExecutionFull.


        :param executable: The executable of this ExecutionFull.
        :type executable: AbstractExecutable
        """

        self._executable = executable

    @property
    def resources(self) -> ExecutionResourceList:
        """Gets the resources of this ExecutionFull.


        :return: The resources of this ExecutionFull.
        :rtype: ExecutionResourceList
        """
        return self._resources

    @resources.setter
    def resources(self, resources: ExecutionResourceList):
        """Sets the resources of this ExecutionFull.


        :param resources: The resources of this ExecutionFull.
        :type resources: ExecutionResourceList
        """

        self._resources = resources

    @property
    def schedule(self) -> List[ExecutionScheduleItem]:
        """Gets the schedule of this ExecutionFull.


        :return: The schedule of this ExecutionFull.
        :rtype: List[ExecutionScheduleItem]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: List[ExecutionScheduleItem]):
        """Sets the schedule of this ExecutionFull.


        :param schedule: The schedule of this ExecutionFull.
        :type schedule: List[ExecutionScheduleItem]
        """

        self._schedule = schedule

    @property
    def offer(self) -> OfferStatus:
        """Gets the offer of this ExecutionFull.

        The offer status.   # noqa: E501

        :return: The offer of this ExecutionFull.
        :rtype: OfferStatus
        """
        return self._offer

    @offer.setter
    def offer(self, offer: OfferStatus):
        """Sets the offer of this ExecutionFull.

        The offer status.   # noqa: E501

        :param offer: The offer of this ExecutionFull.
        :type offer: OfferStatus
        """

        self._offer = offer

    @property
    def execution(self) -> ExecutionStatus:
        """Gets the execution of this ExecutionFull.

        The execution status.   # noqa: E501

        :return: The execution of this ExecutionFull.
        :rtype: ExecutionStatus
        """
        return self._execution

    @execution.setter
    def execution(self, execution: ExecutionStatus):
        """Sets the execution of this ExecutionFull.

        The execution status.   # noqa: E501

        :param execution: The execution of this ExecutionFull.
        :type execution: ExecutionStatus
        """

        self._execution = execution
