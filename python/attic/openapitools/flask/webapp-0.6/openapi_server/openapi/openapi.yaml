openapi: 3.1.0
info:
  contact:
    name: Zarquan
    url: https://github.com/Zarquan
  description: |
    Prototype implementation of the IVOA ExecutionBroker interface
  license:
    name: Creative Commons Attribution Share Alike 4.0 International
  title: IVOA ExecutionBroker
  version: "0.5"
servers:
- description: Localhost development
  url: http://localhost:8080
paths:
  /execution/{ident}:
    get:
      operationId: execution_status
      parameters:
      - description: The execution identifier
        explode: false
        in: path
        name: ident
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionStatusResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExecutionStatusResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ExecutionStatusResponse'
          description: OK
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      operationId: execution_update
      parameters:
      - description: The execution identifier
        explode: false
        in: path
        name: ident
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionUpdateRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/ExecutionUpdateRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/ExecutionUpdateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionStatusResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExecutionStatusResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ExecutionStatusResponse'
          description: OK
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /request:
    post:
      operationId: offers_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffersRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/OffersRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/OffersRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffersResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/OffersResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/OffersResponse'
          description: OK
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  schemas:
    MinMaxInteger:
      description: |
        A minimum and maximum pair with units for an integer value.
      properties:
        min:
          format: int32
          title: min
          type: integer
        max:
          format: int32
          title: min
          type: integer
        units:
          title: units
          type: string
      title: MinMaxInteger
    MinMaxFloat:
      description: |
        A minimum and maximum pair with units for a floating point value.
      properties:
        min:
          format: float
          type: number
        max:
          format: float
          type: number
        units:
          title: units
          type: string
    MinMaxString:
      description: |
        A minimum and maximum pair with units for a string point value.
      properties:
        min:
          title: units
          type: string
        max:
          title: units
          type: string
        units:
          title: units
          type: string
    NameValueMap:
      additionalProperties:
        title: units
        type: string
      description: |
        A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/
      title: properties
    AbstractComponent:
      description: |
        Abstract base class for all our components. This class provides a name, a UUID identifier, and a map of name->value properties.
      properties:
        ident:
          format: uuid
          title: ident
          type: string
        name:
          title: name
          type: string
        properties:
          additionalProperties:
            title: units
            type: string
          description: |
            A map of name->value properties. See https://swagger.io/docs/specification/data-models/dictionaries/
          title: properties
      title: AbstractComponent
    AbstractPolymorph:
      allOf:
      - $ref: '#/components/schemas/AbstractComponent'
      - properties:
          type:
            type: string
            xml:
              attribute: true
      description: |
        Abstract base class for our polymorphic types.
        This class adds the `type` discriminator for sub classes.
      discriminator:
        propertyName: type
      required:
      - type
      title: AbstractPolymorph
    AbstractComputeResource:
      allOf:
      - $ref: '#/components/schemas/AbstractPolymorph'
      description: |
        Abstract base class for compute resources.
      discriminator:
        mapping:
          urn:simple-compute-resource: '#/components/schemas/SimpleComputeResource'
        propertyName: type
      example:
        ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        type: type
        properties:
          key: properties
      required:
      - type
      title: AbstractComputeResource
    SimpleComputeResource:
      allOf:
      - $ref: '#/components/schemas/AbstractComputeResource'
      - properties:
          cores:
            $ref: '#/components/schemas/MinMaxInteger'
          memory:
            $ref: '#/components/schemas/MinMaxInteger'
          volumes:
            description: |
              A list of resources that need to be mounted as volumes.
            items:
              $ref: '#/components/schemas/ComputeResourceVolume'
            type: array
      description: |
        A simple compute resource.
    ComputeResourceVolume:
      allOf:
      - $ref: '#/components/schemas/AbstractComponent'
      - properties:
          path:
            description: |
              The mount point in the target filesystem.
            type: string
          mode:
            description: |
              The read-write mode.
            enum:
            - READONLY
            - READWRITE
            type: string
          resource:
            description: |
              The name or ident of the resource to mount.
            type: string
      description: |
        A resource volume mount.
      title: ComputeResourceVolume
    AbstractStorageResource:
      allOf:
      - $ref: '#/components/schemas/AbstractPolymorph'
      description: |
        Abstract base class for storage resources.
      discriminator:
        mapping:
          urn:simple-storage-resource: '#/components/schemas/SimpleStorageResource'
        propertyName: type
      example:
        ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        type: type
        properties:
          key: properties
      required:
      - type
      title: AbstractStorageResource
    SimpleStorageResource:
      allOf:
      - $ref: '#/components/schemas/AbstractStorageResource'
      - properties:
          size:
            $ref: '#/components/schemas/MinMaxInteger'
      description: |
        A simple storage resource.
    AbstractDataResource:
      allOf:
      - $ref: '#/components/schemas/AbstractPolymorph'
      description: |
        Abstract base class for data resources.
      discriminator:
        mapping:
          urn:simple-data-resource: '#/components/schemas/SimpleDataResource'
          urn:S3-data-resource: '#/components/schemas/S3DataResource'
        propertyName: type
      example:
        ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        type: type
        properties:
          key: properties
      required:
      - type
      title: AbstractDataResource
    SimpleDataResource:
      allOf:
      - $ref: '#/components/schemas/AbstractDataResource'
      - properties:
          location:
            description: |
              The URL of the data to import.
            type: string
      description: |
        A simple downloadable data resource. This type of resource should always be mounted read-only.
    S3DataResource:
      allOf:
      - $ref: '#/components/schemas/AbstractDataResource'
      - properties:
          endpoint:
            description: |
              The endpoint address of the S3 service.
            type: string
          template:
            description: |
              The URL template for the S3 service.
            type: string
          bucket:
            description: |
              The target bucket name.
            type: string
          object:
            description: |
              The target object name.
              Leaving this blank will mount the whole bucket as a directory.
            type: string
      description: A S3 data resource.
    AbstractExecutable:
      allOf:
      - $ref: '#/components/schemas/AbstractPolymorph'
      description: Abstract base class for executables.
      discriminator:
        mapping:
          urn:docker-container-0.1: '#/components/schemas/DockerContainer01'
          urn:single-container-0.1: '#/components/schemas/SingularContainer01'
          urn:repo2docker-01.: '#/components/schemas/Repo2DockerContainer01'
          urn:jupyter-notebook-01.: '#/components/schemas/JupyterNotebook01'
          urn:binder-notebook-01.: '#/components/schemas/BinderNotebook01'
        propertyName: type
      example:
        ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        type: type
        properties:
          key: properties
      required:
      - type
      title: AbstractExecutable
    DockerContainer01:
      allOf:
      - $ref: '#/components/schemas/AbstractExecutable'
      - properties:
          image:
            description: |
              The image name, with or without the repository, namespace or tag.
            example: |
              '`ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13`, `ivoa/oligia-webtop` or just `oligia-webtop`.'
            type: string
          namespace:
            description: |
              The namespace within the repository, if not already specified in the image name.
            example: |
              '`ivoa`'
            type: string
          tag:
            description: "The image tag, if not already specified in the image name."
            example: |
              '`ubuntu-2022.01.13`'
            type: string
          repository:
            description: "The respository tag, if not already specified in the image\
              \ name."
            example: |
              '`ghcr.io`'
            type: string
          platform:
            description: |
              The target CPU architecture the container is built for. The default is `linux/amd64`.
            type: string
          privileged:
            default: false
            description: |
              Set the privileged flag on execution. The default is `false`. See https://docs.docker.com/reference/cli/docker/container/run/#privileged.
            type: boolean
          entrypoint:
            title: units
            type: string
          environment:
            $ref: '#/components/schemas/NameValueMap'
          network:
            $ref: '#/components/schemas/DockerNetworkSpec'
        required:
        - image
      description: |
        A Docker or OCI container executable.
        See https://opencontainers.org/
    DockerNetworkSpec:
      properties:
        ports:
          description: |
            An array of network ports to publish.
          items:
            $ref: '#/components/schemas/DockerNetworkPort'
          title: ports
          type: array
      title: DockerNetworkSpec
    DockerNetworkPort:
      properties:
        address:
          description: |
            The IP address of the external network interface. The client should not set this value. The service will update this with the corrent public interface address when it sets up the execution.
          title: address
          type: string
        external:
          description: |
            The host machine's external port number to connect. The client should not set this value. The service will update this with the corrent port number when it sets up the execution.
          title: external
          type: string
        internal:
          description: The port number on the container to publish.
          title: internal
          type: string
        protocol:
          description: |
            The network protocol to use, default is `TCP`. The `HTTP` and `HTTPS` values further specify the Protocol to use on top of `TCP`. Specifying `HTTPS` may help to meet firewall restrictions at some sites.
          enum:
          - UDP
          - TCP
          - HTTP
          - HTTPS
          title: protocol
          type: string
      required:
      - internal
      title: DockerNetworkPort
    SingularContainer01:
      allOf:
      - $ref: '#/components/schemas/AbstractExecutable'
      - properties:
          image:
            description: |
              The URL to download the container image from.
            type: string
        required:
        - image
      description: |
        A Singularity container executable. See https://docs.sylabs.io/guides/latest/user-guide/
    Repo2DockerContainer01:
      allOf:
      - $ref: '#/components/schemas/AbstractExecutable'
      - properties:
          source:
            description: |
              The URL of the repository to package.
            type: string
        required:
        - source
      description: |
        A Repo2Docker executable. See https://repo2docker.readthedocs.io/en/latest/
    JupyterNotebook01:
      allOf:
      - $ref: '#/components/schemas/AbstractExecutable'
      - properties:
          notebook:
            description: |
              The URL of the notebook. TODO - This needs to take into account different ways of referring to a notebook.
            type: string
        required:
        - notebook
      description: |
        A Jupyter notebook executable. See https://jupyter.org/
    BinderNotebook01:
      allOf:
      - $ref: '#/components/schemas/AbstractExecutable'
      - properties:
          repository:
            description: |
              The URL of the repository to package.
            type: string
          notebook:
            description: |
              The relative path of the notebook within the repository.
            type: string
        required:
        - repository
      description: |
        A Binder notebook executable. See https://the-turing-way.netlify.app/communication/binder/zero-to-binder.html
    ComputeResourceList:
      description: |
        A list of compute resources.
      items:
        $ref: '#/components/schemas/AbstractComputeResource'
      title: compute
      type: array
      xml:
        name: compute
    StorageResourceList:
      description: |
        A list of storage resources.
      items:
        $ref: '#/components/schemas/AbstractStorageResource'
      title: storage
      type: array
      xml:
        name: storage
    DataResourceList:
      description: |
        A list of data resources.
      items:
        $ref: '#/components/schemas/AbstractDataResource'
      title: data
      type: array
      xml:
        name: storage
    OptionBase:
      description: |
        Abstract base class for describing options. This includes the `type` discriminator and the target `path` to update.
      discriminator:
        mapping:
          urn:string-value-option: '#/components/schemas/StringValueOption'
          urn:enum-value-option: '#/components/schemas/EnumValueOption'
          urn:integer-value-option: '#/components/schemas/IntegerValueOption'
          urn:integer-delta-option: '#/components/schemas/IntegerDeltaOption'
        propertyName: type
      example:
        path: path
        type: type
      properties:
        type:
          title: type
          type: string
          xml:
            attribute: true
        path:
          description: |
            The target path that the option applies to.
          title: path
          type: string
          xml:
            attribute: false
      required:
      - path
      - type
      title: OptionBase
    StringValueOption:
      allOf:
      - $ref: '#/components/schemas/OptionBase'
      - properties:
          pattern:
            description: |
              A regular expression pattern restricting the value.
            type: string
      description: |
        A simple string value option. This option tells the client that they can set the string value pointed to by the path.
    EnumValueOption:
      allOf:
      - $ref: '#/components/schemas/OptionBase'
      - properties:
          values:
            description: |
              The list of allowed values to use.
            items:
              title: units
              type: string
            type: array
      description: |
        A simple enum value option. This option tells the client that they can set the enum value pointed to by the path.
      required:
      - values
    IntegerValueOption:
      allOf:
      - $ref: '#/components/schemas/OptionBase'
      - properties:
          min:
            description: |
              The minimum value that can be set.
            format: int32
            type: integer
          max:
            description: |
              The maximum value that can be set.
            format: int32
            type: integer
          units:
            description: |
              The units used for the maximum and minimum values and the default units used for the update. The client may specify different units in the update if they need to.
            type: string
      description: |
        A simple integer value option. This option tells the client that they can set the integer value pointed to by the path.
    IntegerDeltaOption:
      allOf:
      - $ref: '#/components/schemas/OptionBase'
      - properties:
          min:
            description: |
              The minimum change that can be applied.
            format: int32
            type: integer
          max:
            description: |
              The maximum change that can be applied.
            format: int32
            type: integer
          units:
            description: |
              The units used for the maximum and minimum values and the default units used for the update. The client may specify different units in the update if they need to.
            type: string
      description: |
        A simple integer delta option. This option tells the client that they can increment or decrement the integer value pointed to by the path.
    UpdateBase:
      description: |
        Abstract base class for updates. This includes the `type` discriminator and the target `path` to update.
      discriminator:
        mapping:
          urn:string-value-update: '#/components/schemas/StringValueUpdate'
          urn:enum-value-update: '#/components/schemas/EnumValueUpdate'
          urn:integer-value-update: '#/components/schemas/IntegerValueUpdate'
          urn:integer-delta-update: '#/components/schemas/IntegerDeltaUpdate'
        propertyName: type
      properties:
        type:
          title: type
          type: string
          xml:
            attribute: true
        path:
          description: |
            The target path that the update applies to.
          title: path
          type: string
          xml:
            attribute: false
      required:
      - path
      - type
      title: UpdateBase
    StringValueUpdate:
      allOf:
      - $ref: '#/components/schemas/UpdateBase'
      - properties:
          value:
            description: |
              The string value to use.
            type: string
      description: |
        A simple string value update.
      required:
      - value
    EnumValueUpdate:
      allOf:
      - $ref: '#/components/schemas/UpdateBase'
      - properties:
          value:
            description: |
              The enum value to use.
            type: string
      description: |
        A simple enum value update.
      required:
      - value
    IntegerValueUpdate:
      allOf:
      - $ref: '#/components/schemas/UpdateBase'
      - properties:
          value:
            description: |
              The integer value to use.
            format: int32
            type: integer
          units:
            description: |
              The units to use for the value.
            type: string
      description: |
        A simple integer value update.
      required:
      - value
    IntegerDeltaUpdate:
      allOf:
      - $ref: '#/components/schemas/UpdateBase'
      - properties:
          delta:
            description: |
              The increment or decrement to apply.
            format: int32
            type: integer
          units:
            description: |
              The units to use for the change.
            type: string
      description: |
        A simple integer delta update. This increments or decrements the target value by the specified amount.
      required:
      - delta
    ExecutionDuration:
      description: |
        A duration time block describing how long the execution will take. The max and min values are expressed as ISO 8601 time durations. See https://en.wikipedia.org/wiki/ISO_8601#Durations
      example:
        min: min
        max: max
      properties:
        min:
          title: min
          type: string
        max:
          title: max
          type: string
      title: ExecutionDuration
      xml:
        name: duration
    ExecutionScheduleItem:
      description: |
        A date time block for an execution.
      example:
        duration:
          min: min
          max: max
        start: start
      properties:
        start:
          description: |
            The start time for the execution, expressed as an ISO 8601 time interval. See : https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
          title: start
          type: string
        duration:
          $ref: '#/components/schemas/ExecutionDuration'
      title: ExecutionScheduleItem
      xml:
        name: date-time
    ExecutionResourceList:
      description: |
        Combined compute and storage resource lists.
      example:
        compute:
        - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
        - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
        data:
        - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
        - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
        storage:
        - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
        - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
      properties:
        compute:
          description: |
            A list of compute resources.
          items:
            $ref: '#/components/schemas/AbstractComputeResource'
          title: compute
          type: array
          xml:
            name: compute
        storage:
          description: |
            A list of storage resources.
          items:
            $ref: '#/components/schemas/AbstractStorageResource'
          title: storage
          type: array
          xml:
            name: storage
        data:
          description: |
            A list of data resources.
          items:
            $ref: '#/components/schemas/AbstractDataResource'
          title: data
          type: array
          xml:
            name: storage
      title: ExecutionResourceList
      xml:
        name: resources
    OfferStatus:
      description: |
        The status block for an offer.
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        status: OFFERED
      properties:
        status:
          description: |
            Setting the status of an offer to `REJECTED` will reject the offer.
            Setting the status of an offer to `ACCEPTED` will start the execution process
            and the status of any sibling offers will automatically be set to `REJECTED`.
          enum:
          - OFFERED
          - ACCEPTED
          - REJECTED
          - EXPIRED
          title: status
          type: string
        expires:
          description: |
            The date and time that this offer expires.
          format: date-time
          title: expires
          type: string
      title: OfferStatus
      xml:
        name: offer
    ExecutionStatus:
      description: |
        The status block for an execution.
      example:
        started: 2000-01-23T04:56:07.000+00:00
        completed: 2000-01-23T04:56:07.000+00:00
        status: WAITING
      properties:
        started:
          format: date-time
          title: started
          type: string
        completed:
          format: date-time
          title: completed
          type: string
        status:
          description: |
            Status code for the execution.
          enum:
          - WAITING
          - STANDUP
          - RUNNING
          - TEARDOWN
          - COMPLETED
          - CANCELLED
          - FAILED
          title: status
          type: string
      title: ExecutionStatus
      xml:
        name: execution
    ExecutionBase:
      description: |
        The base class for an execution.
      properties:
        executable:
          $ref: '#/components/schemas/AbstractExecutable'
        resources:
          $ref: '#/components/schemas/ExecutionResourceList'
        schedule:
          items:
            $ref: '#/components/schemas/ExecutionScheduleItem'
          title: schedule
          type: array
          xml:
            name: schedule
            wrapped: true
      title: ExecutionBase
      xml:
        name: execution
    ExecutionFull:
      allOf:
      - properties:
          offer:
            $ref: '#/components/schemas/OfferStatus'
          execution:
            $ref: '#/components/schemas/ExecutionStatus'
      - $ref: '#/components/schemas/ExecutionBase'
      description: |
        The full response for an execution.
      example:
        offer:
          expires: 2000-01-23T04:56:07.000+00:00
          status: OFFERED
        execution:
          started: 2000-01-23T04:56:07.000+00:00
          completed: 2000-01-23T04:56:07.000+00:00
          status: WAITING
        schedule:
        - duration:
            min: min
            max: max
          start: start
        - duration:
            min: min
            max: max
          start: start
        resources:
          compute:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          data:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          storage:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
        executable:
          ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
      title: ExecutionFull
      xml:
        name: execution
    OffersRequest:
      allOf:
      - $ref: '#/components/schemas/ExecutionBase'
      description: |
        A request for execution offers.
      example:
        schedule:
        - duration:
            min: min
            max: max
          start: start
        - duration:
            min: min
            max: max
          start: start
        resources:
          compute:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          data:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          storage:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
        executable:
          ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
      title: OffersRequest
      xml:
        name: request
    OffersResponse:
      description: |
        The response to an offers request.
      example:
        result: "YES"
        offers:
        - offer:
            expires: 2000-01-23T04:56:07.000+00:00
            status: OFFERED
          execution:
            started: 2000-01-23T04:56:07.000+00:00
            completed: 2000-01-23T04:56:07.000+00:00
            status: WAITING
          schedule:
          - duration:
              min: min
              max: max
            start: start
          - duration:
              min: min
              max: max
            start: start
          resources:
            compute:
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            data:
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            storage:
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
          executable:
            ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
        - offer:
            expires: 2000-01-23T04:56:07.000+00:00
            status: OFFERED
          execution:
            started: 2000-01-23T04:56:07.000+00:00
            completed: 2000-01-23T04:56:07.000+00:00
            status: WAITING
          schedule:
          - duration:
              min: min
              max: max
            start: start
          - duration:
              min: min
              max: max
            start: start
          resources:
            compute:
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            data:
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            storage:
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
            - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              name: name
              type: type
              properties:
                key: properties
          executable:
            ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
        messages:
        - messages
        - messages
      properties:
        result:
          description: |
            A flag to indicate whether the request can be handled by this service. If service is able to handle the request, then the `result` will be `YES` and the `offers` block should contain one or more offers. If service is not able to handle the request, the `result` will be `NO` and the `messages` block may contain one or more reasons explaining why.
          enum:
          - "YES"
          - "NO"
          title: result
          type: string
        offers:
          description: |
            If the response is `YES`, this list should contain one or more offers describing how the request can be handled.
          items:
            $ref: '#/components/schemas/ExecutionFull'
          title: offers
          type: array
          xml:
            name: offers
            wrapped: true
        messages:
          description: |
            If the response is `NO`, this list may contain one or more messages explaining why the request can't be handled.
          items:
            type: string
          title: messages
          type: array
      title: OffersResponse
      xml:
        name: response
    ExecutionUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/UpdateBase'
      description: |
        A request to update an execution.
      example:
        path: path
        type: type
      title: ExecutionUpdateRequest
      xml:
        name: update-request
    ExecutionStatusResponse:
      allOf:
      - $ref: '#/components/schemas/ExecutionFull'
      - properties:
          options:
            items:
              $ref: '#/components/schemas/OptionBase'
            type: array
      description: |
        The response for an execution status request, including a list of options that may be applied to the execution object.
      example:
        offer:
          expires: 2000-01-23T04:56:07.000+00:00
          status: OFFERED
        execution:
          started: 2000-01-23T04:56:07.000+00:00
          completed: 2000-01-23T04:56:07.000+00:00
          status: WAITING
        schedule:
        - duration:
            min: min
            max: max
          start: start
        - duration:
            min: min
            max: max
          start: start
        options:
        - path: path
          type: type
        - path: path
          type: type
        resources:
          compute:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          data:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          storage:
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
          - ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            name: name
            type: type
            properties:
              key: properties
        executable:
          ident: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          type: type
          properties:
            key: properties
      title: ExecutionStatusResponse
      xml:
        name: execution-status
